{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"YFS Yahoo Finance Scraper with a WYSIWYG approach. Want to scrape data from the summary page use the get_summary_page function. Want to scrape the summary pages of a list of symbols use the get_multiple_summary_pages function. The returned object can be serialized with .json, .dict, and depending on the object .dataframe methods. Each function can accept a proxy to help avoid rate limiting. In fact in the future you can install requests-whaor ANOTHER WORK IN PROGRESS which supplies a rotating proxy to bypass rate limits. Before you start please note adding historical data to this API is not a priority. At some point I will get around to it. My main focus are options, quote information and symbol lookup. So please do not raise issues about historical data. Features Company and Symbol lookup Summary Page Option Chains Statistics Page >> To the documentation. Quick Start Prereqs Python ^3.8 Install with pip pip install yfs Install with poetry poetry add yfs How to scrape multiple summary pages from yahoo finance. from yfs import get_multiple_summary_pages search_items = [ \"Apple\" , \"tsla\" , \"Microsoft\" , \"AMZN\" ] summary_results = get_multiple_summary_pages ( search_items ) for page in summary_results : print ( page . json ( indent = 4 )) break # To shorten up the quick-start output. COLUMNS = [ \"close\" , \"change\" , \"percent_change\" , \"average_volume\" , \"market_cap\" , \"earnings_date\" , ] print ( summary_results . dataframe [ COLUMNS ]) Output \u279c python3 quick_start_example . py Downloading Summary Data ... 100 %| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 4 / 4 [ 00 : 03 < 00 : 00 , 1.19 symbols / s ]{ \"symbol\" : \"AAPL\" , \"name\" : \"Apple Inc.\" , \"quote\" : { \"name\" : \"Apple Inc.\" , \"close\" : 113.02 , \"change\" : - 3.77 , \"percent_change\" : - 3.23 }, \"open\" : 112.89 , \"high\" : 112.22 , \"low\" : 115.37 , \"close\" : 113.02 , \"change\" : - 3.77 , \"percent_change\" : - 3.23 , \"previous_close\" : 116.79 , \"bid_price\" : 112.58 , \"bid_size\" : 800 , \"ask_price\" : 112.77 , \"ask_size\" : 3000 , \"fifty_two_week_low\" : 137.98 , \"fifty_two_week_high\" : 53.15 , \"volume\" : 144711986 , \"average_volume\" : 172065562 , \"market_cap\" : 1933000000000 , \"beta_five_year_monthly\" : 1.28 , \"pe_ratio_ttm\" : 34.29 , \"eps_ttm\" : 3.3 , \"earnings_date\" : \"2020-10-28\" , \"forward_dividend_yield\" : 0.82 , \"forward_dividend_yield_percentage\" : 0.7 , \"exdividend_date\" : \"2020-08-07\" , \"one_year_target_est\" : 119.24 } close change percent_change average_volume market_cap earnings_date symbol AAPL 113.02 - 3.77 - 3.23 172065562 1933000000000 2020 - 10 - 28 AMZN 3125.00 - 96.26 - 2.99 5071692 1565000000000 2020 - 10 - 29 MSFT 206.19 - 6.27 - 2.95 34844893 1560000000000 2020 - 10 - 21 TSLA 415.09 - 33.07 - 7.38 80574089 386785000000 2020 - 10 - 21 Next step fuzzy search examples TODO More testing More Docs More examples WHAOR Example Profile Page Financials Page Analysis Page Holders page Sustainability Page Historical Page Chart Page Conversations Page maybe \u00af_(\u30c4)_/\u00af Contact Information Telegram = Twitter = Tradingview = Discord = @dgnsrekt Email = dgnsrekt@pm.me","title":"Home"},{"location":"#yfs","text":"","title":"YFS"},{"location":"#yahoo-finance-scraper-with-a-wysiwyg-approach","text":"Want to scrape data from the summary page use the get_summary_page function. Want to scrape the summary pages of a list of symbols use the get_multiple_summary_pages function. The returned object can be serialized with .json, .dict, and depending on the object .dataframe methods. Each function can accept a proxy to help avoid rate limiting. In fact in the future you can install requests-whaor ANOTHER WORK IN PROGRESS which supplies a rotating proxy to bypass rate limits. Before you start please note adding historical data to this API is not a priority. At some point I will get around to it. My main focus are options, quote information and symbol lookup. So please do not raise issues about historical data.","title":"Yahoo Finance Scraper with a WYSIWYG approach."},{"location":"#features","text":"Company and Symbol lookup Summary Page Option Chains Statistics Page","title":"Features"},{"location":"#to-the-documentation","text":"","title":"&gt;&gt; To the documentation."},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#prereqs","text":"Python ^3.8","title":"Prereqs"},{"location":"#install-with-pip","text":"pip install yfs","title":"Install with pip"},{"location":"#install-with-poetry","text":"poetry add yfs","title":"Install with poetry"},{"location":"#how-to-scrape-multiple-summary-pages-from-yahoo-finance","text":"from yfs import get_multiple_summary_pages search_items = [ \"Apple\" , \"tsla\" , \"Microsoft\" , \"AMZN\" ] summary_results = get_multiple_summary_pages ( search_items ) for page in summary_results : print ( page . json ( indent = 4 )) break # To shorten up the quick-start output. COLUMNS = [ \"close\" , \"change\" , \"percent_change\" , \"average_volume\" , \"market_cap\" , \"earnings_date\" , ] print ( summary_results . dataframe [ COLUMNS ]) Output \u279c python3 quick_start_example . py Downloading Summary Data ... 100 %| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 4 / 4 [ 00 : 03 < 00 : 00 , 1.19 symbols / s ]{ \"symbol\" : \"AAPL\" , \"name\" : \"Apple Inc.\" , \"quote\" : { \"name\" : \"Apple Inc.\" , \"close\" : 113.02 , \"change\" : - 3.77 , \"percent_change\" : - 3.23 }, \"open\" : 112.89 , \"high\" : 112.22 , \"low\" : 115.37 , \"close\" : 113.02 , \"change\" : - 3.77 , \"percent_change\" : - 3.23 , \"previous_close\" : 116.79 , \"bid_price\" : 112.58 , \"bid_size\" : 800 , \"ask_price\" : 112.77 , \"ask_size\" : 3000 , \"fifty_two_week_low\" : 137.98 , \"fifty_two_week_high\" : 53.15 , \"volume\" : 144711986 , \"average_volume\" : 172065562 , \"market_cap\" : 1933000000000 , \"beta_five_year_monthly\" : 1.28 , \"pe_ratio_ttm\" : 34.29 , \"eps_ttm\" : 3.3 , \"earnings_date\" : \"2020-10-28\" , \"forward_dividend_yield\" : 0.82 , \"forward_dividend_yield_percentage\" : 0.7 , \"exdividend_date\" : \"2020-08-07\" , \"one_year_target_est\" : 119.24 } close change percent_change average_volume market_cap earnings_date symbol AAPL 113.02 - 3.77 - 3.23 172065562 1933000000000 2020 - 10 - 28 AMZN 3125.00 - 96.26 - 2.99 5071692 1565000000000 2020 - 10 - 29 MSFT 206.19 - 6.27 - 2.95 34844893 1560000000000 2020 - 10 - 21 TSLA 415.09 - 33.07 - 7.38 80574089 386785000000 2020 - 10 - 21","title":"How to scrape multiple summary pages from yahoo finance."},{"location":"#next-step-fuzzy-search-examples","text":"","title":"Next step fuzzy search examples"},{"location":"#todo","text":"More testing More Docs More examples WHAOR Example Profile Page Financials Page Analysis Page Holders page Sustainability Page Historical Page Chart Page Conversations Page maybe \u00af_(\u30c4)_/\u00af","title":"TODO"},{"location":"#contact-information","text":"Telegram = Twitter = Tradingview = Discord = @dgnsrekt Email = dgnsrekt@pm.me","title":"Contact Information"},{"location":"changelog/","text":"yfs Changelog v0.3.2 (2020-10-16) fix AssetTypes: changed strings to upper. changed validation. ( fc7021b ) v0.3.1 (2020-10-12) chore Updated change log and version bump. ( ecf1705 ) docs watchlist_example: Updated. ( b6093be ) fix Added BARCELONA and OSAKA exchanges. ( 14038dc ) v0.3.0 (2020-10-10) docs fix missing sectoion in watchlist example. ( b50acfb ) fixed spelling errors. ( dc7f02e ) updated docs, new doc strings, and more examples. ( be9861b ) refactor summary: created multidownloader module. ( 1beecfb ) feat statistics: add get_multiple_statistics_pages function. ( e08e8cc ) test Added more raw test data, statistics tests, and summary tests. ( 196d15b ) chore updated noxfile. ( dcce524 ) Added manifest.in ( 43fc6d8 ) v0.2.2 (2020-10-7) docs started summary examples. ( 1fd914d ) Added summary page example. ( 2ebe1fa ) added advanced watchlist example. ( 489bbb1 ) generated docs with new examples. ( 7336366 ) fixed the get_multiple_summary_pages example section. ( bd21c52 ) fixed some spelling errors. ( a7e5dde ) fix get_table_elements should return optional. ( 49f1993 ) version error. ( 77a7b9a ) high and low data were swapped. ( fc39c7a ) Updated the summary page aapl test. ( 272303a ) v0.2.0 (2020-10-4) ::> 58 commits in 5 version tags, last considered commit: 6f54a6c563d75218d74bed66cb153032ea3384ec","title":"Changelog"},{"location":"changelog/#yfs-changelog","text":"","title":"yfs Changelog"},{"location":"changelog/#v032-2020-10-16","text":"","title":"v0.3.2 (2020-10-16)"},{"location":"changelog/#fix","text":"AssetTypes: changed strings to upper. changed validation. ( fc7021b )","title":"fix"},{"location":"changelog/#v031-2020-10-12","text":"","title":"v0.3.1 (2020-10-12)"},{"location":"changelog/#chore","text":"Updated change log and version bump. ( ecf1705 )","title":"chore"},{"location":"changelog/#docs","text":"watchlist_example: Updated. ( b6093be )","title":"docs"},{"location":"changelog/#fix_1","text":"Added BARCELONA and OSAKA exchanges. ( 14038dc )","title":"fix"},{"location":"changelog/#v030-2020-10-10","text":"","title":"v0.3.0 (2020-10-10)"},{"location":"changelog/#docs_1","text":"fix missing sectoion in watchlist example. ( b50acfb ) fixed spelling errors. ( dc7f02e ) updated docs, new doc strings, and more examples. ( be9861b )","title":"docs"},{"location":"changelog/#refactor","text":"summary: created multidownloader module. ( 1beecfb )","title":"refactor"},{"location":"changelog/#feat","text":"statistics: add get_multiple_statistics_pages function. ( e08e8cc )","title":"feat"},{"location":"changelog/#test","text":"Added more raw test data, statistics tests, and summary tests. ( 196d15b )","title":"test"},{"location":"changelog/#chore_1","text":"updated noxfile. ( dcce524 ) Added manifest.in ( 43fc6d8 )","title":"chore"},{"location":"changelog/#v022-2020-10-7","text":"","title":"v0.2.2 (2020-10-7)"},{"location":"changelog/#docs_2","text":"started summary examples. ( 1fd914d ) Added summary page example. ( 2ebe1fa ) added advanced watchlist example. ( 489bbb1 ) generated docs with new examples. ( 7336366 ) fixed the get_multiple_summary_pages example section. ( bd21c52 ) fixed some spelling errors. ( a7e5dde )","title":"docs"},{"location":"changelog/#fix_2","text":"get_table_elements should return optional. ( 49f1993 ) version error. ( 77a7b9a ) high and low data were swapped. ( fc39c7a ) Updated the summary page aapl test. ( 272303a )","title":"fix"},{"location":"changelog/#v020-2020-10-4","text":"::> 58 commits in 5 version tags, last considered commit: 6f54a6c563d75218d74bed66cb153032ea3384ec","title":"v0.2.0 (2020-10-4)"},{"location":"api/asset-types-module/","text":"A module for asset types. AssetTypes An enum representing all asset types available on yahoo finance. AssetTypes is mostly used to filter down choices of assets from the lookup module.","title":"Asset Types Module"},{"location":"api/asset-types-module/#assettypes","text":"An enum representing all asset types available on yahoo finance. AssetTypes is mostly used to filter down choices of assets from the lookup module.","title":"AssetTypes"},{"location":"api/cleaner-module/","text":"A module for cleaning tables, fields and values. field_cleaner def field_cleaner ( field : str ) -> str Convert field string from an html response into a snake case variable. Arguments : field str - A dirty field string. Example : Input Output Previous Close previous_close Avg. Volume avg_volume Beta (5Y Monthly) beta_five_year_monthly PE Ratio (TTM) pe_ratio_ttm Returns : str - lowercased and converted to snake case. table_cleaner def table_cleaner ( html_table : HTML ) -> Optional [ Dict ] Clean table with two fields. Arguments : html_table HTML - HTML object parsed from a table section. Returns : dict - cleaned fields (keys) and string (values). None - if html_table does not contain table elements. cleaner Partial overloading the pytdanitc.validator function with common args. CommonCleaners Contains the most commonly used methods for cleaning values. remove_comma | def remove_comma ( value : str ) -> str Remove commas from strings and strip whitespace. Arguments : value str - A number with more than 3 digits. Example : Input Output '5,000' '5000' Returns : str - Commas removed and whitespace stripped. remove_brakets | def remove_brakets ( value : str ) -> str Remove () brakets from strings and strip whitespace. Arguments : value str - Containing () brakets. Normally surrounding a percent change. Example : Input Output +19.60 (+1.36%) +19.60 +1.36 Returns : str - () brakets removed and whitespace stripped. remove_percent_sign | def remove_percent_sign ( value : str ) -> str Remove percent sign % from string and strip whitespace. Arguments : value str - Containing percent sign. Example : Input Output +1.36% +1.36 Returns : str - Percent sign % removed and whitespace stripped. remove_brakets_and_percent_sign | def remove_brakets_and_percent_sign ( cls , value : str ) -> str Remove () brakets and % percent signs from string. Arguments : value str - Contains () backets and % percent sign. Example : Input Output +19.60 (+1.36%) +19.60 +1.36 Returns : str - () brakets % percent sign removed. value_is_missing | def value_is_missing ( value : str ) -> bool Check if value has missing data. It checks to see if \"N/A\" and other missing data strings are present in the value. Arguments : value str - A value parsed from yahoo finance. Example : Input Output \"Ex-Dividend Date N/A\" True Returns : bool - True if a missing data string is found in value else False. has_large_number_suffix | def has_large_number_suffix ( value : str ) -> bool Check if string representation of a number has T,B,M,K suffix. Arguments : value str - A value to check if contains a T,B,M,K suffix. Example : Input Output 225.0M True Returns : bool - True if string value contains T,B,M,K suffix else false. clean_large_number | def clean_large_number ( value : str ) -> Optional [ int ] Convert a string representation of a number with a T,B,M,K suffix to an int. Arguments : value str - A value which contains T,B,M,K suffix. Example : Input Output 2.5B 2_500_000_000 Returns : int - suffix removed and used as multiplier to convert to an int. None - This can return None, but should not because the has_large_number_suffix method should be used to check if this method should even be run. common_value_cleaner | def common_value_cleaner ( cls , value : str ) -> Union [ int , str ] Most common method for cleaning most values from yahoo finance. Removes commas and converts number if it has a suffix. Arguments : value str - value to be cleaned. Example : Input Output Type \"5,000\" \"5000\" str \"2.5M\" 2_500_000 int Returns : str - If value is cleaned and doesn't have a suffix. int - If value is cleaned and has a suffix. clean_common_values | def clean_common_values ( cls , value : str ) -> Optional [ Union [ int , str ]] Most common vanilla method for cleaning most values with a check for missing values. Arguments : value str - value to be cleaned. Example : Input Output Type \"5,000\" \"5000\" str \"2.5M\" 2_500_000 int \"N/A\" None None Returns : str - If value is cleaned and doesn't have a suffix. int - If value is cleaned and has a suffix. None - If value is missing. clean_basic_percentage | def clean_basic_percentage ( cls , value : str ) -> Optional [ str ] Clean a single percentage value. Arguments : value str - value to be cleaned. Example : Input Output Type \"-3.4%\" \"-3.4\" str \"N/A\" None None Returns : str - cleaned value if value is not missing. None - if value is missing. clean_date | def clean_date ( cls , value : str ) -> DateTime Clean and convert a string date. Uses pendulum parse method to extract datetime information. Sometimes yahoo finance give multiple dates in one value field. This normally happens in the Earnings Date section on the Summary page. The Earnings Date may have a single date or an estimated Earnings Date range. It would be very easy to have this method output a pendulum.period.Period object that can represent the date range. The decision was made to just return the start of the earnings period for consistency. Arguments : value str - Date string to be converted to datetime object. Example : Input Output \"Earnings Date Oct 26, 2020 - Oct 30, 2020\" DateTime 2020-10-26T00:00:00+00:00 Returns : str - cleaned if value is not missing. None - if value is missing. clean_symbol | def clean_symbol ( cls , value : str ) -> str Make symbol uppercase. Arguments : value str - Stock symbol. Example : Input Output aapl AAPL Returns : str - Uppercased. clean_first_value_split_by_dash | def clean_first_value_split_by_dash ( cls , value : str ) -> str Split value separated by '-' and return the first value. Arguments : value str - A string with multiple values separated by a '-'. Example : Input Output \"2.3400 - 2.4900\" \"2.3400\" Returns : strs - First value parse from string. None - if value is missing. clean_second_value_split_by_dash | def clean_second_value_split_by_dash ( cls , value : str ) -> str Split value separated by '-' and return the second value. Arguments : value str - A string with multiple values separated by a '-'. Example : Input Output \"2.3400 - 2.4900\" \"2.4900\" Returns : strs - Second value parse from string. None - if value is missing. clean_first_value_split_by_space | def clean_first_value_split_by_space ( cls , value : str ) -> str Clean first string containing a change and percent. This will strip brakets and percent sign leaving only a whitespace between the change and percent change. Next it will split the values then return the first value. Normally the Forward Dividend & Yield from the summary page. Arguments : value str - Normally a string containing change and percent change. Example : Input Output \"0.82 (0.73%)\" \"0.82\" Returns : str - The first string. None - if value is missing. clean_second_value_split_by_space | def clean_second_value_split_by_space ( cls , value : str ) -> str Clean second string containing a change and percent. This will strip brakets and percent sign leaving only a whitespace between the change and percent change. Next it will split the values then return the second value. Normally the Forward Dividend & Yield from the summary page. Arguments : value str - Normally a string containing change and percent change. Example : Input Output \"0.82 (0.73%)\" \"0.73\" Returns : str - The Second value. None - if value is missing. clean_first_value_split_by_x | def clean_first_value_split_by_x ( cls , value : str ) -> str Split value separated by 'x' and return the first value. Arguments : value str - A string with multiple values separated by a 'x'. Example : Input Output \"2.4000 x 21500\" \"2.4000\" Returns : strs - First value parse from string. None - if value is missing. clean_second_value_split_by_x | def clean_second_value_split_by_x ( cls , value : str ) -> str Split value separated by 'x' and return the second value. Arguments : value str - A string with multiple values separated by a 'x'. Example : Input Output \"2.4000 x 21500\" \"21500\" Returns : strs - Second value parse from string. None - if value is missing.","title":"Cleaner Module"},{"location":"api/cleaner-module/#field_cleaner","text":"def field_cleaner ( field : str ) -> str Convert field string from an html response into a snake case variable. Arguments : field str - A dirty field string. Example : Input Output Previous Close previous_close Avg. Volume avg_volume Beta (5Y Monthly) beta_five_year_monthly PE Ratio (TTM) pe_ratio_ttm Returns : str - lowercased and converted to snake case.","title":"field_cleaner"},{"location":"api/cleaner-module/#table_cleaner","text":"def table_cleaner ( html_table : HTML ) -> Optional [ Dict ] Clean table with two fields. Arguments : html_table HTML - HTML object parsed from a table section. Returns : dict - cleaned fields (keys) and string (values). None - if html_table does not contain table elements.","title":"table_cleaner"},{"location":"api/cleaner-module/#cleaner","text":"Partial overloading the pytdanitc.validator function with common args.","title":"cleaner"},{"location":"api/cleaner-module/#commoncleaners","text":"Contains the most commonly used methods for cleaning values.","title":"CommonCleaners"},{"location":"api/cleaner-module/#remove_comma","text":"| def remove_comma ( value : str ) -> str Remove commas from strings and strip whitespace. Arguments : value str - A number with more than 3 digits. Example : Input Output '5,000' '5000' Returns : str - Commas removed and whitespace stripped.","title":"remove_comma"},{"location":"api/cleaner-module/#remove_brakets","text":"| def remove_brakets ( value : str ) -> str Remove () brakets from strings and strip whitespace. Arguments : value str - Containing () brakets. Normally surrounding a percent change. Example : Input Output +19.60 (+1.36%) +19.60 +1.36 Returns : str - () brakets removed and whitespace stripped.","title":"remove_brakets"},{"location":"api/cleaner-module/#remove_percent_sign","text":"| def remove_percent_sign ( value : str ) -> str Remove percent sign % from string and strip whitespace. Arguments : value str - Containing percent sign. Example : Input Output +1.36% +1.36 Returns : str - Percent sign % removed and whitespace stripped.","title":"remove_percent_sign"},{"location":"api/cleaner-module/#remove_brakets_and_percent_sign","text":"| def remove_brakets_and_percent_sign ( cls , value : str ) -> str Remove () brakets and % percent signs from string. Arguments : value str - Contains () backets and % percent sign. Example : Input Output +19.60 (+1.36%) +19.60 +1.36 Returns : str - () brakets % percent sign removed.","title":"remove_brakets_and_percent_sign"},{"location":"api/cleaner-module/#value_is_missing","text":"| def value_is_missing ( value : str ) -> bool Check if value has missing data. It checks to see if \"N/A\" and other missing data strings are present in the value. Arguments : value str - A value parsed from yahoo finance. Example : Input Output \"Ex-Dividend Date N/A\" True Returns : bool - True if a missing data string is found in value else False.","title":"value_is_missing"},{"location":"api/cleaner-module/#has_large_number_suffix","text":"| def has_large_number_suffix ( value : str ) -> bool Check if string representation of a number has T,B,M,K suffix. Arguments : value str - A value to check if contains a T,B,M,K suffix. Example : Input Output 225.0M True Returns : bool - True if string value contains T,B,M,K suffix else false.","title":"has_large_number_suffix"},{"location":"api/cleaner-module/#clean_large_number","text":"| def clean_large_number ( value : str ) -> Optional [ int ] Convert a string representation of a number with a T,B,M,K suffix to an int. Arguments : value str - A value which contains T,B,M,K suffix. Example : Input Output 2.5B 2_500_000_000 Returns : int - suffix removed and used as multiplier to convert to an int. None - This can return None, but should not because the has_large_number_suffix method should be used to check if this method should even be run.","title":"clean_large_number"},{"location":"api/cleaner-module/#common_value_cleaner","text":"| def common_value_cleaner ( cls , value : str ) -> Union [ int , str ] Most common method for cleaning most values from yahoo finance. Removes commas and converts number if it has a suffix. Arguments : value str - value to be cleaned. Example : Input Output Type \"5,000\" \"5000\" str \"2.5M\" 2_500_000 int Returns : str - If value is cleaned and doesn't have a suffix. int - If value is cleaned and has a suffix.","title":"common_value_cleaner"},{"location":"api/cleaner-module/#clean_common_values","text":"| def clean_common_values ( cls , value : str ) -> Optional [ Union [ int , str ]] Most common vanilla method for cleaning most values with a check for missing values. Arguments : value str - value to be cleaned. Example : Input Output Type \"5,000\" \"5000\" str \"2.5M\" 2_500_000 int \"N/A\" None None Returns : str - If value is cleaned and doesn't have a suffix. int - If value is cleaned and has a suffix. None - If value is missing.","title":"clean_common_values"},{"location":"api/cleaner-module/#clean_basic_percentage","text":"| def clean_basic_percentage ( cls , value : str ) -> Optional [ str ] Clean a single percentage value. Arguments : value str - value to be cleaned. Example : Input Output Type \"-3.4%\" \"-3.4\" str \"N/A\" None None Returns : str - cleaned value if value is not missing. None - if value is missing.","title":"clean_basic_percentage"},{"location":"api/cleaner-module/#clean_date","text":"| def clean_date ( cls , value : str ) -> DateTime Clean and convert a string date. Uses pendulum parse method to extract datetime information. Sometimes yahoo finance give multiple dates in one value field. This normally happens in the Earnings Date section on the Summary page. The Earnings Date may have a single date or an estimated Earnings Date range. It would be very easy to have this method output a pendulum.period.Period object that can represent the date range. The decision was made to just return the start of the earnings period for consistency. Arguments : value str - Date string to be converted to datetime object. Example : Input Output \"Earnings Date Oct 26, 2020 - Oct 30, 2020\" DateTime 2020-10-26T00:00:00+00:00 Returns : str - cleaned if value is not missing. None - if value is missing.","title":"clean_date"},{"location":"api/cleaner-module/#clean_symbol","text":"| def clean_symbol ( cls , value : str ) -> str Make symbol uppercase. Arguments : value str - Stock symbol. Example : Input Output aapl AAPL Returns : str - Uppercased.","title":"clean_symbol"},{"location":"api/cleaner-module/#clean_first_value_split_by_dash","text":"| def clean_first_value_split_by_dash ( cls , value : str ) -> str Split value separated by '-' and return the first value. Arguments : value str - A string with multiple values separated by a '-'. Example : Input Output \"2.3400 - 2.4900\" \"2.3400\" Returns : strs - First value parse from string. None - if value is missing.","title":"clean_first_value_split_by_dash"},{"location":"api/cleaner-module/#clean_second_value_split_by_dash","text":"| def clean_second_value_split_by_dash ( cls , value : str ) -> str Split value separated by '-' and return the second value. Arguments : value str - A string with multiple values separated by a '-'. Example : Input Output \"2.3400 - 2.4900\" \"2.4900\" Returns : strs - Second value parse from string. None - if value is missing.","title":"clean_second_value_split_by_dash"},{"location":"api/cleaner-module/#clean_first_value_split_by_space","text":"| def clean_first_value_split_by_space ( cls , value : str ) -> str Clean first string containing a change and percent. This will strip brakets and percent sign leaving only a whitespace between the change and percent change. Next it will split the values then return the first value. Normally the Forward Dividend & Yield from the summary page. Arguments : value str - Normally a string containing change and percent change. Example : Input Output \"0.82 (0.73%)\" \"0.82\" Returns : str - The first string. None - if value is missing.","title":"clean_first_value_split_by_space"},{"location":"api/cleaner-module/#clean_second_value_split_by_space","text":"| def clean_second_value_split_by_space ( cls , value : str ) -> str Clean second string containing a change and percent. This will strip brakets and percent sign leaving only a whitespace between the change and percent change. Next it will split the values then return the second value. Normally the Forward Dividend & Yield from the summary page. Arguments : value str - Normally a string containing change and percent change. Example : Input Output \"0.82 (0.73%)\" \"0.73\" Returns : str - The Second value. None - if value is missing.","title":"clean_second_value_split_by_space"},{"location":"api/cleaner-module/#clean_first_value_split_by_x","text":"| def clean_first_value_split_by_x ( cls , value : str ) -> str Split value separated by 'x' and return the first value. Arguments : value str - A string with multiple values separated by a 'x'. Example : Input Output \"2.4000 x 21500\" \"2.4000\" Returns : strs - First value parse from string. None - if value is missing.","title":"clean_first_value_split_by_x"},{"location":"api/cleaner-module/#clean_second_value_split_by_x","text":"| def clean_second_value_split_by_x ( cls , value : str ) -> str Split value separated by 'x' and return the second value. Arguments : value str - A string with multiple values separated by a 'x'. Example : Input Output \"2.4000 x 21500\" \"21500\" Returns : strs - Second value parse from string. None - if value is missing.","title":"clean_second_value_split_by_x"},{"location":"api/exchanges-module/","text":"Module for exchanges organized by region. UnitedStatesExchanges Exchanges based out of the United States. CanadianExchanges Exchanges Based out of Canda. SouthAmericanExchanges Exchanges Based out of South America. EuropeanExchanges Exchanges Based out of Europe. AfricanExchanges Exchanges Based out of Africa. MiddleEasternExchanges Exchanges Based out of MiddleEast. AsianExchanges Exchanges Based out of Asia. AustralianExchanges Exchanges Based out of Australia. UnknownExchanges Exchanges that haven't been identified yet. ExchangeTypes Helper for choosing a valid exchange region. This is used for filtering out results from a fuzzy_search request. Attributes : united_states Enum - UnitedStatesExchanges canada Enum - CanadianExchanges australian Enum - AustralianExchanges asia Enum - AsianExchanges south_america Enum - SouthAmericanExchanges europe Enum - EuropeanExchanges middle_east Enum - MiddleEasternExchanges africa Enum - AfricanExchanges unknown Enum - UnknownExchanges show | def show ( cls ) -> None Print out all valid exchanges.","title":"Exchanges Module"},{"location":"api/exchanges-module/#unitedstatesexchanges","text":"Exchanges based out of the United States.","title":"UnitedStatesExchanges"},{"location":"api/exchanges-module/#canadianexchanges","text":"Exchanges Based out of Canda.","title":"CanadianExchanges"},{"location":"api/exchanges-module/#southamericanexchanges","text":"Exchanges Based out of South America.","title":"SouthAmericanExchanges"},{"location":"api/exchanges-module/#europeanexchanges","text":"Exchanges Based out of Europe.","title":"EuropeanExchanges"},{"location":"api/exchanges-module/#africanexchanges","text":"Exchanges Based out of Africa.","title":"AfricanExchanges"},{"location":"api/exchanges-module/#middleeasternexchanges","text":"Exchanges Based out of MiddleEast.","title":"MiddleEasternExchanges"},{"location":"api/exchanges-module/#asianexchanges","text":"Exchanges Based out of Asia.","title":"AsianExchanges"},{"location":"api/exchanges-module/#australianexchanges","text":"Exchanges Based out of Australia.","title":"AustralianExchanges"},{"location":"api/exchanges-module/#unknownexchanges","text":"Exchanges that haven't been identified yet.","title":"UnknownExchanges"},{"location":"api/exchanges-module/#exchangetypes","text":"Helper for choosing a valid exchange region. This is used for filtering out results from a fuzzy_search request. Attributes : united_states Enum - UnitedStatesExchanges canada Enum - CanadianExchanges australian Enum - AustralianExchanges asia Enum - AsianExchanges south_america Enum - SouthAmericanExchanges europe Enum - EuropeanExchanges middle_east Enum - MiddleEasternExchanges africa Enum - AfricanExchanges unknown Enum - UnknownExchanges","title":"ExchangeTypes"},{"location":"api/exchanges-module/#show","text":"| def show ( cls ) -> None Print out all valid exchanges.","title":"show"},{"location":"api/lookup-module/","text":"Contains the classes and functions for using the yahoo finance look up. ExchangeNotFoundError Raised when an exchange is not found. AssetTypeNotFoundError Raised when an assset type is not found. ValidSymbol A valid symbol response from the yahoo finance quote lookup search bar. Attributes : symbol str - A valid ticker symbol abbreviation. name str - Company name. exchange st - A valid market exchange. The exchange str will be validated against all of the valid exchange enums found in the yfs.exchanges module. asset_type str - A valid asset type. The asset type will be validated against the yfs.asset_types.AssetTypes enum. Example : { \"symbol\" : \"AAPL\" , \"name\" : \"Apple Inc.\" , \"exchange\" : \"NASDAQ\" , \"asset_type\" : \"Equity\" } Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary. check_exchange | def check_exchange ( cls , value : str ) -> str Check if the exchange is in one of the valid yfs.exchanges enums. Raises : ExchangeNotFoundError - If the exchange is not one yfs.exchanges enums and if the RAISE_ERROR_ON_UNKOWN_EXCHANGE_OR_ASSET environmental variable is set to True. (Default) is False. check_type | def check_type ( cls , value : str ) -> str Check if the asset_type is one of the valid yfs.asset_types enum. Raises : AssetTypeNotFoundError - If the asset is not found in yfs.asset_types enum and if the RAISE_ERROR_ON_UNKOWN_EXCHANGE_OR_ASSET environmental variable is set to True. (Default) is False. ValidSymbolList A list of symbol responses from the yahoo finance quote lookup search bar. Attributes : symbols ValidSymbol - A list of ValidSymbol's. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary. __getitem__ | def __getitem__ ( index : int ) -> Optional [ ValidSymbol ] Return ValidSymbol at index position. __len__ | def __len__ () -> int Return the amount of symbols. __iter__ | def __iter__ () -> Iterable Iterate over ValidSymbol objects. filter_symbols | def filter_symbols ( exchange_type : VALID_EXCHANGE_UNION , asset_type : AssetTypes ) -> \"ValidSymbolList\" Filter symbols by exchange and asset type. Arguments : exchange_type - A valid exchange enum. Example: yfs.exchanges.UnitedStatesExchanges asset_type - A valid asset type. Example: yfs.asset_types.AssetTypes.EQUITY Returns : ValidSymbolList - A new ValidSymbolList with symbols within the exchange and asset filters. fuzzy_search def fuzzy_search ( quote_lookup : str , exchange_type : VALID_EXCHANGE_UNION = UnitedStatesExchanges , asset_type : AssetTypes = AssetTypes . EQUITY , first_ticker : bool = True , use_filter : bool = False , ** kwargs , ,) -> Optional [ Union [ ValidSymbol , ValidSymbolList ]] Lookup and validate symbols or company names. Examples : results = fuzzy_search ( \"apple\" , first_ticker = False ) print ( results . json ( indent = 4 )) { \"symbols\" : [ { \"symbol\" : \"AAPL\" , \"name\" : \"Apple Inc.\" , \"exchange\" : \"NASDAQ\" , \"asset_type\" : \"Equity\" }, { \"symbol\" : \"APLE\" , \"name\" : \"Apple Hospitality REIT, Inc.\" , \"exchange\" : \"NYSE\" , \"asset_type\" : \"Equity\" }, ... ] } result = fuzzy_search ( \"aapl\" , first_ticker = True ) print ( result . json ( indent = 4 )) { \"symbol\" : \"AAPL\" , \"name\" : \"Apple Inc.\" , \"exchange\" : \"NASDAQ\" , \"asset_type\" : \"Equity\" } Arguments : quote_lookup - The company name or symbol to search for. exchange_type - One of the yfs.exchanges enums. Default is UnitedStatesExchanges. asset_type - One of the yfs.asset_type.AssetTypes. Default is AssetTypes.EQUITY first_ticker - If set to true returns the first ValidSymbol in the ValidSymbolList. This is normally the best recommended match from the yahoo finance quote lookup. **kwargs - Pass (session, proxies, and timeout) to the requestor function. Returns : ValidSymbol - If first_ticker is set to true and a valid ticker response is found. ValidSymbolList - If first_ticker is set to false and a list of valid ticker responses are found. None - If the yahoo finance quote lookup search returns an empty response or if the response did not meet the exchange and asset type filtering requirements. Raises : ExchangeNotFoundError - If a exchange is found which has not been implemented in one of the yfs.exchanges enums. If this error is raised please raise an issue on github with the output. AssetTypeNotFoundError - If an asset type is not found in the yfs.asset_types.AssetTypes enum. If this error is raised please raise and issue on github with the output.","title":"Lookup Module"},{"location":"api/lookup-module/#exchangenotfounderror","text":"Raised when an exchange is not found.","title":"ExchangeNotFoundError"},{"location":"api/lookup-module/#assettypenotfounderror","text":"Raised when an assset type is not found.","title":"AssetTypeNotFoundError"},{"location":"api/lookup-module/#validsymbol","text":"A valid symbol response from the yahoo finance quote lookup search bar. Attributes : symbol str - A valid ticker symbol abbreviation. name str - Company name. exchange st - A valid market exchange. The exchange str will be validated against all of the valid exchange enums found in the yfs.exchanges module. asset_type str - A valid asset type. The asset type will be validated against the yfs.asset_types.AssetTypes enum. Example : { \"symbol\" : \"AAPL\" , \"name\" : \"Apple Inc.\" , \"exchange\" : \"NASDAQ\" , \"asset_type\" : \"Equity\" } Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary.","title":"ValidSymbol"},{"location":"api/lookup-module/#check_exchange","text":"| def check_exchange ( cls , value : str ) -> str Check if the exchange is in one of the valid yfs.exchanges enums. Raises : ExchangeNotFoundError - If the exchange is not one yfs.exchanges enums and if the RAISE_ERROR_ON_UNKOWN_EXCHANGE_OR_ASSET environmental variable is set to True. (Default) is False.","title":"check_exchange"},{"location":"api/lookup-module/#check_type","text":"| def check_type ( cls , value : str ) -> str Check if the asset_type is one of the valid yfs.asset_types enum. Raises : AssetTypeNotFoundError - If the asset is not found in yfs.asset_types enum and if the RAISE_ERROR_ON_UNKOWN_EXCHANGE_OR_ASSET environmental variable is set to True. (Default) is False.","title":"check_type"},{"location":"api/lookup-module/#validsymbollist","text":"A list of symbol responses from the yahoo finance quote lookup search bar. Attributes : symbols ValidSymbol - A list of ValidSymbol's. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary.","title":"ValidSymbolList"},{"location":"api/lookup-module/#__getitem__","text":"| def __getitem__ ( index : int ) -> Optional [ ValidSymbol ] Return ValidSymbol at index position.","title":"__getitem__"},{"location":"api/lookup-module/#__len__","text":"| def __len__ () -> int Return the amount of symbols.","title":"__len__"},{"location":"api/lookup-module/#__iter__","text":"| def __iter__ () -> Iterable Iterate over ValidSymbol objects.","title":"__iter__"},{"location":"api/lookup-module/#filter_symbols","text":"| def filter_symbols ( exchange_type : VALID_EXCHANGE_UNION , asset_type : AssetTypes ) -> \"ValidSymbolList\" Filter symbols by exchange and asset type. Arguments : exchange_type - A valid exchange enum. Example: yfs.exchanges.UnitedStatesExchanges asset_type - A valid asset type. Example: yfs.asset_types.AssetTypes.EQUITY Returns : ValidSymbolList - A new ValidSymbolList with symbols within the exchange and asset filters.","title":"filter_symbols"},{"location":"api/lookup-module/#fuzzy_search","text":"def fuzzy_search ( quote_lookup : str , exchange_type : VALID_EXCHANGE_UNION = UnitedStatesExchanges , asset_type : AssetTypes = AssetTypes . EQUITY , first_ticker : bool = True , use_filter : bool = False , ** kwargs , ,) -> Optional [ Union [ ValidSymbol , ValidSymbolList ]] Lookup and validate symbols or company names. Examples : results = fuzzy_search ( \"apple\" , first_ticker = False ) print ( results . json ( indent = 4 )) { \"symbols\" : [ { \"symbol\" : \"AAPL\" , \"name\" : \"Apple Inc.\" , \"exchange\" : \"NASDAQ\" , \"asset_type\" : \"Equity\" }, { \"symbol\" : \"APLE\" , \"name\" : \"Apple Hospitality REIT, Inc.\" , \"exchange\" : \"NYSE\" , \"asset_type\" : \"Equity\" }, ... ] } result = fuzzy_search ( \"aapl\" , first_ticker = True ) print ( result . json ( indent = 4 )) { \"symbol\" : \"AAPL\" , \"name\" : \"Apple Inc.\" , \"exchange\" : \"NASDAQ\" , \"asset_type\" : \"Equity\" } Arguments : quote_lookup - The company name or symbol to search for. exchange_type - One of the yfs.exchanges enums. Default is UnitedStatesExchanges. asset_type - One of the yfs.asset_type.AssetTypes. Default is AssetTypes.EQUITY first_ticker - If set to true returns the first ValidSymbol in the ValidSymbolList. This is normally the best recommended match from the yahoo finance quote lookup. **kwargs - Pass (session, proxies, and timeout) to the requestor function. Returns : ValidSymbol - If first_ticker is set to true and a valid ticker response is found. ValidSymbolList - If first_ticker is set to false and a list of valid ticker responses are found. None - If the yahoo finance quote lookup search returns an empty response or if the response did not meet the exchange and asset type filtering requirements. Raises : ExchangeNotFoundError - If a exchange is found which has not been implemented in one of the yfs.exchanges enums. If this error is raised please raise an issue on github with the output. AssetTypeNotFoundError - If an asset type is not found in the yfs.asset_types.AssetTypes enum. If this error is raised please raise and issue on github with the output.","title":"fuzzy_search"},{"location":"api/options-module/","text":"Contains the classes and functions for scraping a yahoo finance option page. ContractExpiration Contract Expiration. Attributes : symbol str - Ticker symbol. timestamp str - Timestamp of expiration date. expiration_date DateTime - Datetime of expiration date. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary. convert_to_datetime | def convert_to_datetime ( cls , value : str ) -> DateTime Convert expiration timestamp to datetime. __lt__ | def __lt__ ( other : \"ContractExpiration\" ) -> Optional [ \"ContractExpiration\" ] Compare expiration_dates for sorting. ContractExpirationList Contains Multiple Expirations. Attributes : expiration_list List[ContractExpiration] - multiple expirations. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary. sort_dates | def sort_dates ( cls , values : List [ ContractExpiration ]) -> List [ ContractExpiration ] Sort expiration_list by date. filter_expirations_after | def filter_expirations_after ( after : DateTime ) -> None Filter out any expiration dates prior to the after date. Arguments : after DateTime - datetime to filter. Example : Input Args Output [01JAN19, 01FEB19, 01MAR19] after: 15JAN19 [01FEB19, 01MAR19] filter_expirations_before | def filter_expirations_before ( before : DateTime ) -> None Filter out any expiration dates post the before date. Arguments : before DateTime - datetime to filter. Example : Input Args Output [01JAN19, 01FEB19, 01MAR19] before: 15JAN19 [01JAN19] filter_expirations_between | def filter_expirations_between ( after : DateTime , before : DateTime ) -> None Filter dates outside of a after and before range. Arguments : after DateTime - datetime to filter. before DateTime - datetime to filter. Example : Input Args Output [01JAN19, 01FEB19, 01MAR19] after: 15JAN19,before: 15JAN19 [01FEB19, 01MAR19] filter_expirations_after_days | def filter_expirations_after_days ( days : int ) -> None Filter expirations only allowing expirations after n days. Arguments : days int - Number of days to start filtering from. All expirations which expire prior to the days will be filtered out. filter_expirations_before_days | def filter_expirations_before_days ( days : int ) -> None Filter expiration only allowing expirations before n days. Arguments : days int - Number of days to start filtering from. All expirations which expire post days will be filtered out. filter_expirations_between_days | def filter_expirations_between_days ( after_days : Optional [ int ] = None , before_days : Optional [ int ] = None ) -> None Filter expiration only allowing expirations between a range of days. Arguments : after_days int - Number of days to start filtering from. All expirations which expire prior to the days will be filtered out. before_days int - Number of days to start filtering from. All expirations which expire post days will be filtered out. __len__ | def __len__ () -> int Length of the expiration_list. __iter__ | def __iter__ () -> Iterable Iterate over the expirations_list. __add__ | def __add__ ( other : \"ContractExpirationList\" ) -> Optional [ \"ContractExpirationList\" ] Combine two ContractExpirationLists using the + operator. OptionContractType Enum for option contract types. OptionContract Represents an Option Contract. Attributes : symbol str - Ticker symbol. contract_type OptionContractType - Call or Put type. timestamp str - Raw timestamp scraped from yahoo finance. This string is left untouched to make sure there is no issues when building a URL. expiration_date DateTime - Converted from the timestamp. This allows allows sorting and filtering. in_the_money bool - True if strike price is ITM else False. contract_name str - Contract Name. last_trade_date DateTime - Date of last trade. strike float - Contracts strike price. last_price float - Last price of a transaction between a contract buyer and a seller. bid float - Last bid price. ask float - Last ask price. change float - Price change in dollars. percent_change float - Price change in percentage. volume int - Volume. open_interest int - Number of contracts opened. implied_volatility float - Contract IV. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary. OptionsChain Chain of option contracts with the same expiration date. Attributes : symbol str - Company symbol. expiration_date DateTime - Contracts expiration date. chain List[OptionContract] - List of OptionContracts. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary. dataframe | def dataframe () -> DataFrame Return a dataframe of the option chain. calls | def calls () -> \"OptionsChain\" Return a OptionChain with only call contracts. puts | def puts () -> \"OptionsChain\" Return a OptionChain with only put contracts. __len__ | def __len__ () -> int Return the number of OptionContracts in the OptionChain. MultipleOptionChains Multiple Option Chains with multiple expiration dates. Attributes : option_chain_list List[OptionsChain] - List of option chains. contract_expiration_list ContractExpirationList - List of expirations. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary. dataframe | def dataframe () -> DataFrame Return a dataframe of multiple option chains. calls | def calls () -> \"MultipleOptionChains\" Return a MultipleOptionChains object with only call contracts. puts | def puts () -> \"MultipleOptionChains\" Return a MultipleOptionChains object with only put contracts. __len__ | def __len__ () -> int Return the number of option chains. __iter__ | def __iter__ () -> Iterable Iterate over option chain list. __add__ | def __add__ ( other : \"MultipleOptionChains\" ) -> Optional [ \"MultipleOptionChains\" ] Concatenate MultipleOptionChains. get_table_elements def get_table_elements ( html : HTML ) -> Tuple [ Optional [ HTML ], Optional [ HTML ]] Parse call and put HTML table elements. Arguments : html HTML - HTML element with call and put data. Returns : Tuple of found call and put html elements. parse_option_table def parse_option_table ( contract_expiration : ContractExpiration , contract_type : OptionContractType , options_table : HTML ) -> List [ OptionContract ] Parse and clean fields and rows of a options table HTML element. Arguments : contract_expiration ContractExpiration - Used to pass ContractExpiration data to the returned OptionContract object. contract_type OptionContractType - Call or Put options_table HTML - HTML element with raw options table data. Returns : A list of OptionContracts parsed from the html options_table. get_option_expirations def get_option_expirations ( symbol : str , ** kwargs ) -> Optional [ ContractExpirationList ] Get and parse option expiration data for the selected symbol. Arguments : symbol str - Ticker symbol. kwargs - Pass (session, proxies, and timeout) to the requestor function. Returns : ContractExpirationList OptionPageNotFound Raised when options page data is not found. get_options_page def get_options_page ( symbol : str , after_days : int = None , before_days : int = None , first_chain : bool = False , use_fuzzy_search : bool = True , page_not_found_ok : bool = False , ** kwargs , ,) -> Optional [ Union [ OptionsChain , MultipleOptionChains ]] Get options data from yahoo finance options page. Arguments : symbol str - Ticker symbol. after_days int - Number of days to start filtering from. All expirations which expire prior to the days will be filtered out. before_days int - Number of days to start filtering from. All expirations which expire post days will be filtered out. first_chain bool - If True returns first chain. Else returns all found chains within search range. use_fuzzy_search bool - If True, does a symbol lookup validation prior to requesting options page data. page_not_found_ok bool - If True, returns None when page is not found. **kwargs - Pass (session, proxies, and timeout) to the requestor function. Returns : OptionsChain - If first_chain is set to True the first found OptionsChain within the after_days and before_days range is returned. This is all option contracts from a single expiration and symbol. MultipleOptionChains - If first_chain is set to False all OptionsChains within the after_days and before_days range are returned. This can have multiple expirations. Even if one expiration date is found the MultipleOptionChains object is returned. None - If no contracts are found and page_not_found_ok is True. Raises : OptionPageNotFound - If page_not_found_ok is False and the Options page is not found.","title":"Options Module"},{"location":"api/options-module/#contractexpiration","text":"Contract Expiration. Attributes : symbol str - Ticker symbol. timestamp str - Timestamp of expiration date. expiration_date DateTime - Datetime of expiration date. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary.","title":"ContractExpiration"},{"location":"api/options-module/#convert_to_datetime","text":"| def convert_to_datetime ( cls , value : str ) -> DateTime Convert expiration timestamp to datetime.","title":"convert_to_datetime"},{"location":"api/options-module/#__lt__","text":"| def __lt__ ( other : \"ContractExpiration\" ) -> Optional [ \"ContractExpiration\" ] Compare expiration_dates for sorting.","title":"__lt__"},{"location":"api/options-module/#contractexpirationlist","text":"Contains Multiple Expirations. Attributes : expiration_list List[ContractExpiration] - multiple expirations. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary.","title":"ContractExpirationList"},{"location":"api/options-module/#sort_dates","text":"| def sort_dates ( cls , values : List [ ContractExpiration ]) -> List [ ContractExpiration ] Sort expiration_list by date.","title":"sort_dates"},{"location":"api/options-module/#filter_expirations_after","text":"| def filter_expirations_after ( after : DateTime ) -> None Filter out any expiration dates prior to the after date. Arguments : after DateTime - datetime to filter. Example : Input Args Output [01JAN19, 01FEB19, 01MAR19] after: 15JAN19 [01FEB19, 01MAR19]","title":"filter_expirations_after"},{"location":"api/options-module/#filter_expirations_before","text":"| def filter_expirations_before ( before : DateTime ) -> None Filter out any expiration dates post the before date. Arguments : before DateTime - datetime to filter. Example : Input Args Output [01JAN19, 01FEB19, 01MAR19] before: 15JAN19 [01JAN19]","title":"filter_expirations_before"},{"location":"api/options-module/#filter_expirations_between","text":"| def filter_expirations_between ( after : DateTime , before : DateTime ) -> None Filter dates outside of a after and before range. Arguments : after DateTime - datetime to filter. before DateTime - datetime to filter. Example : Input Args Output [01JAN19, 01FEB19, 01MAR19] after: 15JAN19,before: 15JAN19 [01FEB19, 01MAR19]","title":"filter_expirations_between"},{"location":"api/options-module/#filter_expirations_after_days","text":"| def filter_expirations_after_days ( days : int ) -> None Filter expirations only allowing expirations after n days. Arguments : days int - Number of days to start filtering from. All expirations which expire prior to the days will be filtered out.","title":"filter_expirations_after_days"},{"location":"api/options-module/#filter_expirations_before_days","text":"| def filter_expirations_before_days ( days : int ) -> None Filter expiration only allowing expirations before n days. Arguments : days int - Number of days to start filtering from. All expirations which expire post days will be filtered out.","title":"filter_expirations_before_days"},{"location":"api/options-module/#filter_expirations_between_days","text":"| def filter_expirations_between_days ( after_days : Optional [ int ] = None , before_days : Optional [ int ] = None ) -> None Filter expiration only allowing expirations between a range of days. Arguments : after_days int - Number of days to start filtering from. All expirations which expire prior to the days will be filtered out. before_days int - Number of days to start filtering from. All expirations which expire post days will be filtered out.","title":"filter_expirations_between_days"},{"location":"api/options-module/#__len__","text":"| def __len__ () -> int Length of the expiration_list.","title":"__len__"},{"location":"api/options-module/#__iter__","text":"| def __iter__ () -> Iterable Iterate over the expirations_list.","title":"__iter__"},{"location":"api/options-module/#__add__","text":"| def __add__ ( other : \"ContractExpirationList\" ) -> Optional [ \"ContractExpirationList\" ] Combine two ContractExpirationLists using the + operator.","title":"__add__"},{"location":"api/options-module/#optioncontracttype","text":"Enum for option contract types.","title":"OptionContractType"},{"location":"api/options-module/#optioncontract","text":"Represents an Option Contract. Attributes : symbol str - Ticker symbol. contract_type OptionContractType - Call or Put type. timestamp str - Raw timestamp scraped from yahoo finance. This string is left untouched to make sure there is no issues when building a URL. expiration_date DateTime - Converted from the timestamp. This allows allows sorting and filtering. in_the_money bool - True if strike price is ITM else False. contract_name str - Contract Name. last_trade_date DateTime - Date of last trade. strike float - Contracts strike price. last_price float - Last price of a transaction between a contract buyer and a seller. bid float - Last bid price. ask float - Last ask price. change float - Price change in dollars. percent_change float - Price change in percentage. volume int - Volume. open_interest int - Number of contracts opened. implied_volatility float - Contract IV. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary.","title":"OptionContract"},{"location":"api/options-module/#optionschain","text":"Chain of option contracts with the same expiration date. Attributes : symbol str - Company symbol. expiration_date DateTime - Contracts expiration date. chain List[OptionContract] - List of OptionContracts. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary.","title":"OptionsChain"},{"location":"api/options-module/#dataframe","text":"| def dataframe () -> DataFrame Return a dataframe of the option chain.","title":"dataframe"},{"location":"api/options-module/#calls","text":"| def calls () -> \"OptionsChain\" Return a OptionChain with only call contracts.","title":"calls"},{"location":"api/options-module/#puts","text":"| def puts () -> \"OptionsChain\" Return a OptionChain with only put contracts.","title":"puts"},{"location":"api/options-module/#__len___1","text":"| def __len__ () -> int Return the number of OptionContracts in the OptionChain.","title":"__len__"},{"location":"api/options-module/#multipleoptionchains","text":"Multiple Option Chains with multiple expiration dates. Attributes : option_chain_list List[OptionsChain] - List of option chains. contract_expiration_list ContractExpirationList - List of expirations. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary.","title":"MultipleOptionChains"},{"location":"api/options-module/#dataframe_1","text":"| def dataframe () -> DataFrame Return a dataframe of multiple option chains.","title":"dataframe"},{"location":"api/options-module/#calls_1","text":"| def calls () -> \"MultipleOptionChains\" Return a MultipleOptionChains object with only call contracts.","title":"calls"},{"location":"api/options-module/#puts_1","text":"| def puts () -> \"MultipleOptionChains\" Return a MultipleOptionChains object with only put contracts.","title":"puts"},{"location":"api/options-module/#__len___2","text":"| def __len__ () -> int Return the number of option chains.","title":"__len__"},{"location":"api/options-module/#__iter___1","text":"| def __iter__ () -> Iterable Iterate over option chain list.","title":"__iter__"},{"location":"api/options-module/#__add___1","text":"| def __add__ ( other : \"MultipleOptionChains\" ) -> Optional [ \"MultipleOptionChains\" ] Concatenate MultipleOptionChains.","title":"__add__"},{"location":"api/options-module/#get_table_elements","text":"def get_table_elements ( html : HTML ) -> Tuple [ Optional [ HTML ], Optional [ HTML ]] Parse call and put HTML table elements. Arguments : html HTML - HTML element with call and put data. Returns : Tuple of found call and put html elements.","title":"get_table_elements"},{"location":"api/options-module/#parse_option_table","text":"def parse_option_table ( contract_expiration : ContractExpiration , contract_type : OptionContractType , options_table : HTML ) -> List [ OptionContract ] Parse and clean fields and rows of a options table HTML element. Arguments : contract_expiration ContractExpiration - Used to pass ContractExpiration data to the returned OptionContract object. contract_type OptionContractType - Call or Put options_table HTML - HTML element with raw options table data. Returns : A list of OptionContracts parsed from the html options_table.","title":"parse_option_table"},{"location":"api/options-module/#get_option_expirations","text":"def get_option_expirations ( symbol : str , ** kwargs ) -> Optional [ ContractExpirationList ] Get and parse option expiration data for the selected symbol. Arguments : symbol str - Ticker symbol. kwargs - Pass (session, proxies, and timeout) to the requestor function. Returns : ContractExpirationList","title":"get_option_expirations"},{"location":"api/options-module/#optionpagenotfound","text":"Raised when options page data is not found.","title":"OptionPageNotFound"},{"location":"api/options-module/#get_options_page","text":"def get_options_page ( symbol : str , after_days : int = None , before_days : int = None , first_chain : bool = False , use_fuzzy_search : bool = True , page_not_found_ok : bool = False , ** kwargs , ,) -> Optional [ Union [ OptionsChain , MultipleOptionChains ]] Get options data from yahoo finance options page. Arguments : symbol str - Ticker symbol. after_days int - Number of days to start filtering from. All expirations which expire prior to the days will be filtered out. before_days int - Number of days to start filtering from. All expirations which expire post days will be filtered out. first_chain bool - If True returns first chain. Else returns all found chains within search range. use_fuzzy_search bool - If True, does a symbol lookup validation prior to requesting options page data. page_not_found_ok bool - If True, returns None when page is not found. **kwargs - Pass (session, proxies, and timeout) to the requestor function. Returns : OptionsChain - If first_chain is set to True the first found OptionsChain within the after_days and before_days range is returned. This is all option contracts from a single expiration and symbol. MultipleOptionChains - If first_chain is set to False all OptionsChains within the after_days and before_days range are returned. This can have multiple expirations. Even if one expiration date is found the MultipleOptionChains object is returned. None - If no contracts are found and page_not_found_ok is True. Raises : OptionPageNotFound - If page_not_found_ok is False and the Options page is not found.","title":"get_options_page"},{"location":"api/paths-module/","text":"Module for commonly used paths. SOURCE_ROOT A path to the yfs source code directory. PROJECT_ROOT A path to the yfs project directory. TEST_DIRECTORY A path to the yfs test directory","title":"Paths Module"},{"location":"api/paths-module/#source_root","text":"A path to the yfs source code directory.","title":"SOURCE_ROOT"},{"location":"api/paths-module/#project_root","text":"A path to the yfs project directory.","title":"PROJECT_ROOT"},{"location":"api/paths-module/#test_directory","text":"A path to the yfs test directory","title":"TEST_DIRECTORY"},{"location":"api/quote-module/","text":"Module for parsing quote header data from a yahoo finance page. clean_quote_name def clean_quote_name ( value : str ) -> str Remove the symbol and strip whitespace from the company name. Arguments : value str - A company name string parsed from the quote header portion of any yahoo finance page. Example : Input Output Apple Inc. (AAPL) Apple Inc. Returns : str - Company name with the ticker symbol removed. Quote Represents all the data parsed from the quote header section of a yahoo finance page. Attributes : name str - Company name. close float - Close price. change float - Dollar change in price. percent_change float - Percent change in price. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary. parse_quote_header_info def parse_quote_header_info ( html : HTML ) -> Optional [ Quote ] Parse and clean html elements from the quote header info portion of a yahoo finance page. Arguments : html HTML - An HTML object containing quote header info data ready to be parse. Returns : Quote - Quote object containing the parsed quote header data if successfully parsed. None - No quote header info data present in the HTML.","title":"Quote Module"},{"location":"api/quote-module/#clean_quote_name","text":"def clean_quote_name ( value : str ) -> str Remove the symbol and strip whitespace from the company name. Arguments : value str - A company name string parsed from the quote header portion of any yahoo finance page. Example : Input Output Apple Inc. (AAPL) Apple Inc. Returns : str - Company name with the ticker symbol removed.","title":"clean_quote_name"},{"location":"api/quote-module/#quote","text":"Represents all the data parsed from the quote header section of a yahoo finance page. Attributes : name str - Company name. close float - Close price. change float - Dollar change in price. percent_change float - Percent change in price. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary.","title":"Quote"},{"location":"api/quote-module/#parse_quote_header_info","text":"def parse_quote_header_info ( html : HTML ) -> Optional [ Quote ] Parse and clean html elements from the quote header info portion of a yahoo finance page. Arguments : html HTML - An HTML object containing quote header info data ready to be parse. Returns : Quote - Quote object containing the parsed quote header data if successfully parsed. None - No quote header info data present in the HTML.","title":"parse_quote_header_info"},{"location":"api/requestor-module/","text":"Send get requests. requestor def requestor ( url : str , session : Session = None , proxies : Dict [ str , str ] = None , timeout : int = 5 ) -> Response Send get requests. Arguments : url str - The url to send a request to. session Session - A Session object to send a request with. proxies dict - Dictionary mapping protocol to the URL of the proxy. timeout int - How long to wait for the server to send a response.","title":"Requestor Module"},{"location":"api/requestor-module/#requestor","text":"def requestor ( url : str , session : Session = None , proxies : Dict [ str , str ] = None , timeout : int = 5 ) -> Response Send get requests. Arguments : url str - The url to send a request to. session Session - A Session object to send a request with. proxies dict - Dictionary mapping protocol to the URL of the proxy. timeout int - How long to wait for the server to send a response.","title":"requestor"},{"location":"api/statistics-module/","text":"Contains the classes and functions for scraping a yahoo finance statistics page. PeriodType Enum which describes the period the data represents. Valuation Data representing the intrinsic value of an asset for a single date. This is for one column of an entire valuation table. Attributes : date Date - Date of the valuation. period_type PeriodType - Annual, Quarterly, or Monthly. market_cap_intraday int - Calculated using shares_outstanding from the most recently filed report. enterprise_value int - Measure of a company's total value. trailing_pe float - Relative valuation multiple that is based on the last 12 months of actual earnings forward_pe float - Forward price-to-earnings (forward P/E) is a version of the ratio of price-to-earnings (P/E) that uses forecasted earnings for the P/E calculation. peg_ratio_five_year_expected float - A valuation metric for determining the relative trade-off between the price of a stock, the EPS, and the company's expected growth. price_sales_ttm float - Trailing Twelve Months price to sales ratio. price_book_mrq float - todo enterprise_revenue float - todo enterprise_ebitda float - todo Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary. Config Pydantic config. ValuationMeasuresTable Representing the entire Valuation Measures Table on a yahoo finance Statistics Page. Attributes : valuations List[Valuation] - A list of valuation objects. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary. dataframe | def dataframe () -> DataFrame Return the Valuation Measures Table as a dataframe. FinancialHighlights Financial highlights section of a yahoo finance statistics page. Attributes : fiscal_year_ends Date - todo most_recent_quarter_mrq Date - todo profit_margin float - todo operating_margin_ttm float - todo return_on_assets_ttm float - todo return_on_equity_ttm float - todo revenue_ttm int - todo revenue_per_share_ttm float - todo quarterly_revenue_growth_yoy float - todo gross_profit_ttm int - todo ebitda int - todo net_income_avi_to_common_ttm int - todo diluted_eps_ttm float - todo quarterly_earnings_growth_yoy float - todo total_cash_mrq int - todo total_cash_per_share_mrq float - todo total_debt_mrq int - todo total_debt_equity_mrq float - todo current_ratio_mrq float - todo book_value_per_share_mrq float - todo levered_free_cash_flow_ttm int - todo operating_cash_flow_ttm int - todo Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary. TradingInformation Trading information section of a yahoo finance statistics page. Attributes : beta_five_year_monthly float - todo fifty_two_week_change float - todo sp500_fifty_two_week_change float - todo fifty_two_week_high float - todo fifty_two_week_low float - todo fifty_day_moving_average float - todo two_hundred_day_moving_average float - todo average_three_month_volume int - todo average_ten_day_volume int - todo shares_outstanding int - todo float int - todo percent_held_by_insiders float - todo percent_held_by_institutions float - todo shares_short int - todo shares_short_date Date - todo short_ratio float - todo short_ratio_date Date - todo short_percent_of_float float - todo short_percent_of_float_date Date - todo short_percent_of_shares_outstanding float - todo short_percent_of_shares_outstanding_date Date - todo shares_short_prior_month int - todo shares_short_prior_month_date Date - todo forward_annual_dividend_rate float - todo forward_annual_dividend_yield float - todo trailing_annual_dividend_rate float - todo trailing_annual_dividend_yield float - todo five_year_average_dividend_yield float - todo payout_ratio float - todo dividend_date Date - todo exdividend_date Date - todo last_split_factor str - todo last_split_date Date - todo Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary. parse_valuation_table def parse_valuation_table ( html : HTML , period_type : PeriodType = PeriodType . QUARTERLY ) -> Optional [ ValuationMeasuresTable ] Parse and clean fields and rows of a valuation measures table HTML element. Arguments : html - Html element containing valuation table data. period_type PeriodType - The period to be parsed. Only quarterly is currently supported. Returns : ValuationMeasuresTable - If data is found. None - No data available. parse_financial_highlights_table def parse_financial_highlights_table ( html : HTML ) -> Optional [ FinancialHighlights ] Parse and clean fields and rows of a financial highlights section of an HTML element. parse_trading_information_table def parse_trading_information_table ( html : HTML ) -> Optional [ TradingInformation ] Parse and clean fields and rows of a trading information section of an HTML element. StatisticsPage Represents all data you can find on a yahoo finance statistics page. Attributes : symbol st - Ticker Symbol. quote Quote - Quote data from the quote header section. valuation_measures ValuationMeasuresTable - Valuation Measures Table section. financial_highlights FinancialHighlights - Financial Highlights section. trading_information TradingInformation - Trading Information section Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary. __lt__ | def __lt__ ( other ) -> bool Compare StatisticsPage objects to allow ordering by symbol. StatisticsPageGroup Multiple Statistics Pages Group together. Attributes : pages - Multiple StatisticsPage objects. A page for each symbol requested. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary. append | def append ( page : StatisticsPage ) -> None Append a StatisticsPage to the StatisticsPageGroup. Arguments : page StatisticsPage - A StatisticsPage object to add to the group. symbols | def symbols () -> List [ str ] List of symbols in the StatisticsPageGroup. sort | def sort () -> None Sort StatisticsPage objects by symbol. dataframe | def dataframe () -> DataFrame Return a dataframe of multiple statistics pages. __iter__ | def __iter__ () -> Iterable Iterate over StatisticsPage objects. __len__ | def __len__ () -> int Length of StatisticsPage objects. get_statistics_page def get_statistics_page ( symbol : str , use_fuzzy_search : bool = True , page_not_found_ok : bool = False , ** kwargs , ,) -> Optional [ StatisticsPage ] Get statistics page data. Arguments : symbol str - Ticker symbol. use_fuzzy_search bool - If True validates symbol prior to requesting options page data. page_not_found_ok bool - If True Returns None when page is not found. **kwargs - Pass (session, proxies, and timeout) to the requestor function. Returns : StatisticsPage - When data is found. None - No data is found and page_not_found_ok is True. Raises : AttributeError - When a page is not found and the page_not_found_ok arg is false. get_multiple_statistics_pages def get_multiple_statistics_pages ( symbols : List [ str ], use_fuzzy_search : bool = True , page_not_found_ok : bool = True , with_threads : bool = False , thread_count : int = 5 , progress_bar : bool = True , ** kwargs , ,) -> Optional [ StatisticsPageGroup ] Get multiple statistics pages. Arguments : symbols List[str] - Ticker symbols or company names. use_fuzzy_search bool - If True does a symbol lookup validation prior to requesting data. page_not_found_ok bool - If True Returns None when page is not found. with_threads bool - If True uses threading. thread_count int - Number of threads to use if with_threads is set to True. **kwargs - Pass (session, proxies, and timeout) to the requestor function. progress_bar bool - If True shows the progress bar else the progress bar is not shown. Returns : StatisticsPageGroup - When data is found. None - No data is found and page_not_found_ok is True. Raises : AttributeError - When a page is not found and the page_not_found_ok arg is false.","title":"Statistics Module"},{"location":"api/statistics-module/#periodtype","text":"Enum which describes the period the data represents.","title":"PeriodType"},{"location":"api/statistics-module/#valuation","text":"Data representing the intrinsic value of an asset for a single date. This is for one column of an entire valuation table. Attributes : date Date - Date of the valuation. period_type PeriodType - Annual, Quarterly, or Monthly. market_cap_intraday int - Calculated using shares_outstanding from the most recently filed report. enterprise_value int - Measure of a company's total value. trailing_pe float - Relative valuation multiple that is based on the last 12 months of actual earnings forward_pe float - Forward price-to-earnings (forward P/E) is a version of the ratio of price-to-earnings (P/E) that uses forecasted earnings for the P/E calculation. peg_ratio_five_year_expected float - A valuation metric for determining the relative trade-off between the price of a stock, the EPS, and the company's expected growth. price_sales_ttm float - Trailing Twelve Months price to sales ratio. price_book_mrq float - todo enterprise_revenue float - todo enterprise_ebitda float - todo Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary.","title":"Valuation"},{"location":"api/statistics-module/#config","text":"Pydantic config.","title":"Config"},{"location":"api/statistics-module/#valuationmeasurestable","text":"Representing the entire Valuation Measures Table on a yahoo finance Statistics Page. Attributes : valuations List[Valuation] - A list of valuation objects. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary.","title":"ValuationMeasuresTable"},{"location":"api/statistics-module/#dataframe","text":"| def dataframe () -> DataFrame Return the Valuation Measures Table as a dataframe.","title":"dataframe"},{"location":"api/statistics-module/#financialhighlights","text":"Financial highlights section of a yahoo finance statistics page. Attributes : fiscal_year_ends Date - todo most_recent_quarter_mrq Date - todo profit_margin float - todo operating_margin_ttm float - todo return_on_assets_ttm float - todo return_on_equity_ttm float - todo revenue_ttm int - todo revenue_per_share_ttm float - todo quarterly_revenue_growth_yoy float - todo gross_profit_ttm int - todo ebitda int - todo net_income_avi_to_common_ttm int - todo diluted_eps_ttm float - todo quarterly_earnings_growth_yoy float - todo total_cash_mrq int - todo total_cash_per_share_mrq float - todo total_debt_mrq int - todo total_debt_equity_mrq float - todo current_ratio_mrq float - todo book_value_per_share_mrq float - todo levered_free_cash_flow_ttm int - todo operating_cash_flow_ttm int - todo Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary.","title":"FinancialHighlights"},{"location":"api/statistics-module/#tradinginformation","text":"Trading information section of a yahoo finance statistics page. Attributes : beta_five_year_monthly float - todo fifty_two_week_change float - todo sp500_fifty_two_week_change float - todo fifty_two_week_high float - todo fifty_two_week_low float - todo fifty_day_moving_average float - todo two_hundred_day_moving_average float - todo average_three_month_volume int - todo average_ten_day_volume int - todo shares_outstanding int - todo float int - todo percent_held_by_insiders float - todo percent_held_by_institutions float - todo shares_short int - todo shares_short_date Date - todo short_ratio float - todo short_ratio_date Date - todo short_percent_of_float float - todo short_percent_of_float_date Date - todo short_percent_of_shares_outstanding float - todo short_percent_of_shares_outstanding_date Date - todo shares_short_prior_month int - todo shares_short_prior_month_date Date - todo forward_annual_dividend_rate float - todo forward_annual_dividend_yield float - todo trailing_annual_dividend_rate float - todo trailing_annual_dividend_yield float - todo five_year_average_dividend_yield float - todo payout_ratio float - todo dividend_date Date - todo exdividend_date Date - todo last_split_factor str - todo last_split_date Date - todo Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary.","title":"TradingInformation"},{"location":"api/statistics-module/#parse_valuation_table","text":"def parse_valuation_table ( html : HTML , period_type : PeriodType = PeriodType . QUARTERLY ) -> Optional [ ValuationMeasuresTable ] Parse and clean fields and rows of a valuation measures table HTML element. Arguments : html - Html element containing valuation table data. period_type PeriodType - The period to be parsed. Only quarterly is currently supported. Returns : ValuationMeasuresTable - If data is found. None - No data available.","title":"parse_valuation_table"},{"location":"api/statistics-module/#parse_financial_highlights_table","text":"def parse_financial_highlights_table ( html : HTML ) -> Optional [ FinancialHighlights ] Parse and clean fields and rows of a financial highlights section of an HTML element.","title":"parse_financial_highlights_table"},{"location":"api/statistics-module/#parse_trading_information_table","text":"def parse_trading_information_table ( html : HTML ) -> Optional [ TradingInformation ] Parse and clean fields and rows of a trading information section of an HTML element.","title":"parse_trading_information_table"},{"location":"api/statistics-module/#statisticspage","text":"Represents all data you can find on a yahoo finance statistics page. Attributes : symbol st - Ticker Symbol. quote Quote - Quote data from the quote header section. valuation_measures ValuationMeasuresTable - Valuation Measures Table section. financial_highlights FinancialHighlights - Financial Highlights section. trading_information TradingInformation - Trading Information section Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary.","title":"StatisticsPage"},{"location":"api/statistics-module/#__lt__","text":"| def __lt__ ( other ) -> bool Compare StatisticsPage objects to allow ordering by symbol.","title":"__lt__"},{"location":"api/statistics-module/#statisticspagegroup","text":"Multiple Statistics Pages Group together. Attributes : pages - Multiple StatisticsPage objects. A page for each symbol requested. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary.","title":"StatisticsPageGroup"},{"location":"api/statistics-module/#append","text":"| def append ( page : StatisticsPage ) -> None Append a StatisticsPage to the StatisticsPageGroup. Arguments : page StatisticsPage - A StatisticsPage object to add to the group.","title":"append"},{"location":"api/statistics-module/#symbols","text":"| def symbols () -> List [ str ] List of symbols in the StatisticsPageGroup.","title":"symbols"},{"location":"api/statistics-module/#sort","text":"| def sort () -> None Sort StatisticsPage objects by symbol.","title":"sort"},{"location":"api/statistics-module/#dataframe_1","text":"| def dataframe () -> DataFrame Return a dataframe of multiple statistics pages.","title":"dataframe"},{"location":"api/statistics-module/#__iter__","text":"| def __iter__ () -> Iterable Iterate over StatisticsPage objects.","title":"__iter__"},{"location":"api/statistics-module/#__len__","text":"| def __len__ () -> int Length of StatisticsPage objects.","title":"__len__"},{"location":"api/statistics-module/#get_statistics_page","text":"def get_statistics_page ( symbol : str , use_fuzzy_search : bool = True , page_not_found_ok : bool = False , ** kwargs , ,) -> Optional [ StatisticsPage ] Get statistics page data. Arguments : symbol str - Ticker symbol. use_fuzzy_search bool - If True validates symbol prior to requesting options page data. page_not_found_ok bool - If True Returns None when page is not found. **kwargs - Pass (session, proxies, and timeout) to the requestor function. Returns : StatisticsPage - When data is found. None - No data is found and page_not_found_ok is True. Raises : AttributeError - When a page is not found and the page_not_found_ok arg is false.","title":"get_statistics_page"},{"location":"api/statistics-module/#get_multiple_statistics_pages","text":"def get_multiple_statistics_pages ( symbols : List [ str ], use_fuzzy_search : bool = True , page_not_found_ok : bool = True , with_threads : bool = False , thread_count : int = 5 , progress_bar : bool = True , ** kwargs , ,) -> Optional [ StatisticsPageGroup ] Get multiple statistics pages. Arguments : symbols List[str] - Ticker symbols or company names. use_fuzzy_search bool - If True does a symbol lookup validation prior to requesting data. page_not_found_ok bool - If True Returns None when page is not found. with_threads bool - If True uses threading. thread_count int - Number of threads to use if with_threads is set to True. **kwargs - Pass (session, proxies, and timeout) to the requestor function. progress_bar bool - If True shows the progress bar else the progress bar is not shown. Returns : StatisticsPageGroup - When data is found. None - No data is found and page_not_found_ok is True. Raises : AttributeError - When a page is not found and the page_not_found_ok arg is false.","title":"get_multiple_statistics_pages"},{"location":"api/summary-module/","text":"Contains the classes and functions for scraping a yahoo finance summary page. SummaryPage Data scraped from the yahoo finance summary page. Attributes : symbol str - Ticker Symbol name str - Ticker Name quote Quote - Quote header section of the page. open float - Open price. high float - Days high. low float - Days low. close float - Days close price. change float - Dollar change in price. percent_change float - Percent change in price. previous_close float - Previous days close price. bid_price float - Bid price. bid_size int - Bid size. ask_price float - Ask price. ask_size int - Ask size. fifty_two_week_high float - High of the fifty two week range. fifty_two_week_low float - Low of the fifty two week range. volume int - Volume. average_volume int - Average Volume. market_cap int - Market capitalization. beta_five_year_monthly float - Five year monthly prices benchmarked against the SPY. pe_ratio_ttm float - Share Price divided by Earnings Per Share trailing twelve months. eps_ttm float - Earnings per share trailing twelve months. earnings_date Date - Estimated earnings report release date. forward_dividend_yield float - Estimated dividend yield. forward_dividend_yield_percentage float - Estimated divided yield percentage. exdividend_date Date - Ex-Dividend Date. one_year_target_est float - One year target estimation. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary. __lt__ | def __lt__ ( other ) -> bool Compare SummaryPage objects to allow ordering by symbol. SummaryPageGroup Group of SummaryPage objects from multiple symbols. Attributes : pages (SummaryPage): Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary. append | def append ( page : SummaryPage ) -> None Append a SummaryPage to the SummaryPageGroup. Arguments : page SummaryPage - A SummaryPage object to add to the group. symbols | def symbols () -> List [ str ] List of symbols in the SummaryPageGroup. sort | def sort () -> None Sort SummaryPage objects by symbol. dataframe | def dataframe () -> Optional [ DataFrame ] Return a dataframe of multiple SummaryPage objects. __iter__ | def __iter__ () -> Iterable Iterate over SummaryPage objects. __len__ | def __len__ () -> int Length of SummaryPage objects. parse_summary_table def parse_summary_table ( html : HTML ) -> Optional [ Dict ] Parse data from summary table HTML element. get_summary_page def get_summary_page ( symbol : str , use_fuzzy_search : bool = True , page_not_found_ok : bool = False , ** kwargs , ,) -> Optional [ SummaryPage ] Get summary page data. Arguments : symbol str - Ticker symbol. use_fuzzy_search bool - If True does a symbol lookup validation prior to requesting summary page data. page_not_found_ok bool - If True Returns None when page is not found. **kwargs - Pass (session, proxies, and timeout) to the requestor function. Returns : SummaryPage - When data is found. None - No data is found and page_not_found_ok is True. Raises : AttributeError - When a page is not found and the page_not_found_ok arg is false. get_multiple_summary_pages def get_multiple_summary_pages ( symbols : List [ str ], use_fuzzy_search : bool = True , page_not_found_ok : bool = True , with_threads : bool = False , thread_count : int = 5 , progress_bar : bool = True , ** kwargs , ,) -> Optional [ SummaryPageGroup ] Get multiple summary pages. Arguments : symbols List[str] - Ticker symbols or company names. use_fuzzy_search bool - If True does a symbol lookup validation prior to requesting data. page_not_found_ok bool - If True Returns None when page is not found. with_threads bool - If True uses threading. thread_count int - Number of threads to use if with_threads is set to True. **kwargs - Pass (session, proxies, and timeout) to the requestor function. progress_bar bool - If True shows the progress bar else the progress bar is not shown. Returns : SummaryPageGroup - When data is found. None - No data is found and page_not_found_ok is True. Raises : AttributeError - When a page is not found and the page_not_found_ok arg is false.","title":"Summary Module"},{"location":"api/summary-module/#summarypage","text":"Data scraped from the yahoo finance summary page. Attributes : symbol str - Ticker Symbol name str - Ticker Name quote Quote - Quote header section of the page. open float - Open price. high float - Days high. low float - Days low. close float - Days close price. change float - Dollar change in price. percent_change float - Percent change in price. previous_close float - Previous days close price. bid_price float - Bid price. bid_size int - Bid size. ask_price float - Ask price. ask_size int - Ask size. fifty_two_week_high float - High of the fifty two week range. fifty_two_week_low float - Low of the fifty two week range. volume int - Volume. average_volume int - Average Volume. market_cap int - Market capitalization. beta_five_year_monthly float - Five year monthly prices benchmarked against the SPY. pe_ratio_ttm float - Share Price divided by Earnings Per Share trailing twelve months. eps_ttm float - Earnings per share trailing twelve months. earnings_date Date - Estimated earnings report release date. forward_dividend_yield float - Estimated dividend yield. forward_dividend_yield_percentage float - Estimated divided yield percentage. exdividend_date Date - Ex-Dividend Date. one_year_target_est float - One year target estimation. Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary.","title":"SummaryPage"},{"location":"api/summary-module/#__lt__","text":"| def __lt__ ( other ) -> bool Compare SummaryPage objects to allow ordering by symbol.","title":"__lt__"},{"location":"api/summary-module/#summarypagegroup","text":"Group of SummaryPage objects from multiple symbols. Attributes : pages (SummaryPage): Notes : This class inherits from the pydantic BaseModel which allows for the use of .json() and .dict() for serialization to json strings and dictionaries. .json() - Serialize to a JSON object. .dict() - Serialize to a dictionary.","title":"SummaryPageGroup"},{"location":"api/summary-module/#append","text":"| def append ( page : SummaryPage ) -> None Append a SummaryPage to the SummaryPageGroup. Arguments : page SummaryPage - A SummaryPage object to add to the group.","title":"append"},{"location":"api/summary-module/#symbols","text":"| def symbols () -> List [ str ] List of symbols in the SummaryPageGroup.","title":"symbols"},{"location":"api/summary-module/#sort","text":"| def sort () -> None Sort SummaryPage objects by symbol.","title":"sort"},{"location":"api/summary-module/#dataframe","text":"| def dataframe () -> Optional [ DataFrame ] Return a dataframe of multiple SummaryPage objects.","title":"dataframe"},{"location":"api/summary-module/#__iter__","text":"| def __iter__ () -> Iterable Iterate over SummaryPage objects.","title":"__iter__"},{"location":"api/summary-module/#__len__","text":"| def __len__ () -> int Length of SummaryPage objects.","title":"__len__"},{"location":"api/summary-module/#parse_summary_table","text":"def parse_summary_table ( html : HTML ) -> Optional [ Dict ] Parse data from summary table HTML element.","title":"parse_summary_table"},{"location":"api/summary-module/#get_summary_page","text":"def get_summary_page ( symbol : str , use_fuzzy_search : bool = True , page_not_found_ok : bool = False , ** kwargs , ,) -> Optional [ SummaryPage ] Get summary page data. Arguments : symbol str - Ticker symbol. use_fuzzy_search bool - If True does a symbol lookup validation prior to requesting summary page data. page_not_found_ok bool - If True Returns None when page is not found. **kwargs - Pass (session, proxies, and timeout) to the requestor function. Returns : SummaryPage - When data is found. None - No data is found and page_not_found_ok is True. Raises : AttributeError - When a page is not found and the page_not_found_ok arg is false.","title":"get_summary_page"},{"location":"api/summary-module/#get_multiple_summary_pages","text":"def get_multiple_summary_pages ( symbols : List [ str ], use_fuzzy_search : bool = True , page_not_found_ok : bool = True , with_threads : bool = False , thread_count : int = 5 , progress_bar : bool = True , ** kwargs , ,) -> Optional [ SummaryPageGroup ] Get multiple summary pages. Arguments : symbols List[str] - Ticker symbols or company names. use_fuzzy_search bool - If True does a symbol lookup validation prior to requesting data. page_not_found_ok bool - If True Returns None when page is not found. with_threads bool - If True uses threading. thread_count int - Number of threads to use if with_threads is set to True. **kwargs - Pass (session, proxies, and timeout) to the requestor function. progress_bar bool - If True shows the progress bar else the progress bar is not shown. Returns : SummaryPageGroup - When data is found. None - No data is found and page_not_found_ok is True. Raises : AttributeError - When a page is not found and the page_not_found_ok arg is false.","title":"get_multiple_summary_pages"},{"location":"examples/extra-watchlist-example/","text":"How to build a one delta OTM call options watchlist from twitter cashtags. Overview First, we will scrape a users tweets for cashtags with nitter_scraper Next, we will prepare and clean the tweet data to build a watchlist. After that, we will startup a network of tor nodes behind a reverse proxy, to bypass the yahoo finance rate limit, using requests-whaor Last, we will download, clean, and concatenate all the options data into a single DataFrame. Requirements Docker Engine installed. python ^3.8 poetry Dependencies yfs nitter_scraper requests-whaor Note requests-whaor will create multiple TOR nodes enclosed in docker containers to proxy your requests. Environment Preparation Run the following commands to build a folder and initiate a poetry project. $ mkdir yfs_watchlist $ cd yfs_watchlist $ poetry init Keep hitting the enter button until you are out of the poetry init prompt. Now lets add the dependencies. $ poetry add nitter-scraper $ poetry add requests-whaor $ poetry add yfs Create options_bot.py $ touch options_bot.py Open options_bot.py in your favorite editor. Imports from concurrent.futures import as_completed , ThreadPoolExecutor The ThreadPoolExecutor is used to call fuzzy_search and get_options_page functions asynchronously with a pool of threads. from nitter_scraper import NitterScraper The nitter_scraper library is used to scrape tweets. import pandas The pandas library is used to clean and concatenate the DataFrames. from requests_whaor import RequestsWhaor The requests_whaor library will supply a rotating proxy server to send our requests through, giving each request a unique IP address. If a request times out or gets a error code from the server it will retry with another IP address. from yfs import fuzzy_search , get_options_page Last we use these yfs functions to search for valid symbols and get options data. from concurrent.futures import as_completed , ThreadPoolExecutor from nitter_scraper import NitterScraper import pandas from requests_whaor import RequestsWhaor from yfs import fuzzy_search , get_options_page The imports should look like this. Scrape Twitter and build a watchlist watchlist = [] # Lets scrape the first page of eWhispers twitter feed for a list of symbols. with NitterScraper ( port = 8008 ) as nitter : for tweet in nitter . get_tweets ( \"eWhispers\" , pages = 1 ): if tweet . is_pinned : # Lets skip the pinned tweet. continue if tweet . is_retweet : # Lets skip any retweets. continue if tweet . entries . cashtags : # Lets check if cashtags exists in the tweet then add them to the watchlist. watchlist += tweet . entries . cashtags print ( \".\" , end = \"\" , flush = True ) # Quick little progress bar so we don't get bored. print () # Print a new line when complete just to make things look a little cleaner. watchlist = sorted ( set ( map ( lambda cashtag : cashtag . replace ( \"$\" , \"\" ) . strip (), watchlist ))) # Lets sort, remove duplicates, and clean '$' strings from each symbol. Now we have a dynamically generated list of potentially interesting stock symbols. valid_symbols = [] # Used to store symbols validated with the fuzzy_search function. call_chains = [] # Used to store all the found call option chains. # Decide on how many threads and proxies your computer can handle MAX_THREADS = 6 # Each proxy is a tor circuit running inside a separate docker container. MAX_PROXIES = 6 Now on to the meat of the code. with RequestsWhaor ( onion_count = MAX_PROXIES , max_threads = MAX_THREADS ) as request_whaor : # RequestsWhaor will spin up a network of TOR nodes we will use as a rotating proxy. with ThreadPoolExecutor ( max_workers = MAX_THREADS ) as executor : futures = [ executor . submit ( fuzzy_search , ticker , session = request_whaor ) # ^--Here we pass request_whaor as a session like object for yfs fuzzy_search. for ticker in watchlist ] for future in as_completed ( futures ): result = future . result ( timeout = 60 ) print ( \".\" , end = \"\" , flush = True ) # Quick progress bar. if result : # Now we append the results to the valid_symbols list. valid_symbols . append ( result ) # Lets get the raw symbol from each ValidSymbol object. valid_symbols = [ ticker . symbol for ticker in valid_symbols ] print ( \"found\" , len ( valid_symbols )) # Number of valid symbols found. request_whaor . restart_onions () # Lets get a fresh pool of proxies before the next step. futures = [ executor . submit ( get_options_page , ticker , after_days = 60 , # Lets get options that have at least 60 days before expiring. first_chain = True , # We only want the first expiration with all strike prices. use_fuzzy_search = False , # We did fuzzy search already no need to do it again. session = request_whaor , # pass request_whaor as a session like object to yfs. page_not_found_ok = True , # return None if the symbol doesn't have an option page. timeout = 5 , # Pass a 5 second timeout to the session. ) for ticker in valid_symbols ] for future in as_completed ( futures ): try : result = future . result ( timeout = 120 ) print ( \".\" , end = \"\" , flush = True ) # Progress bar. if result : if result . calls : # If the results have a call option chain we will append it to the list. call_chains . append ( result . calls ) except Exception as exc : # We will pass on any exceptions. print ( exc ) Note ThreadPoolExecutor information here. Final Section First, iterate over the result. Then, convert each chain into a dataframe. Next, get the first out of the money option and append it to a list. After that, concatenate the list of single option contract dataframes into a single dataframe. Now lets, drop some columns and sort by implied volatility to make things look pretty. Finally, print the results. first_otm_strike = [] for chain in call_chains : df = chain . dataframe otm = df [ df [ \"in_the_money\" ] == False ] . head ( 1 ) if otm is not None : first_otm_strike . append ( otm ) final = pandas . concat ( first_otm_strike , ignore_index = True ) final . drop ( columns = [ \"timestamp\" , \"contract_name\" ], inplace = True ) final . sort_values ( by = \"implied_volatility\" , inplace = True ) final . reset_index ( inplace = True ) print ( final . to_string ()) Now we have a single dataframe of one delta OTM call options built from a dynamically generated watch list. Output index symbol contract_type expiration_date in_the_money strike last_price bid ask change percent_change volume open_interest implied_volatility 0 122 SNX call 2020 -12-18 00 :00:00+00:00 False 155 .0 5 .92 0 .00 0 .00 0 .00 NaN 7 19 .0 1 .56 1 10 AZZ call 2021 -02-19 00 :00:00+00:00 False 40 .0 2 .00 0 .00 0 .00 0 .00 None 1 0 .0 3 .13 2 133 USAT call 2021 -01-15 00 :00:00+00:00 False 10 .0 1 .25 0 .00 0 .00 0 .00 None 2 41 .0 12 .50 3 116 SINA call 2020 -12-18 00 :00:00+00:00 False 45 .0 0 .05 0 .05 0 .50 0 .00 NaN 5 59 .0 18 .36 4 71 JNJ call 2020 -12-18 00 :00:00+00:00 False 155 .0 3 .75 3 .70 3 .80 0 .55 17 .19 150 3168 .0 21 .05 5 94 PEP call 2020 -12-18 00 :00:00+00:00 False 140 .0 4 .26 4 .15 4 .45 0 .10 2 .4 38 4826 .0 21 .51 6 31 COST call 2021 -01-15 00 :00:00+00:00 False 370 .0 18 .60 18 .50 18 .95 1 .46 8 .52 90 1326 .0 25 .29 7 55 GIS call 2021 -01-15 00 :00:00+00:00 False 62 .5 2 .99 2 .57 2 .99 0 .39 15 7 1501 .0 25 .78 8 59 INFO call 2020 -12-18 00 :00:00+00:00 False 80 .0 3 .46 2 .65 3 .10 0 .00 None 1 314 .0 27 .06 9 95 PGR call 2021 -01-15 00 :00:00+00:00 False 100 .0 5 .15 5 .00 5 .60 0 .65 14 .44 29 613 .0 27 .55 10 81 MKC call 2020 -12-18 00 :00:00+00:00 False 200 .0 7 .50 7 .10 7 .70 0 .50 7 .14 6 188 .0 27 .72 11 0 ACN call 2021 -01-15 00 :00:00+00:00 False 230 .0 12 .50 12 .40 13 .20 1 .50 13 .64 63 596 .0 29 .38 12 27 CAG call 2020 -12-18 00 :00:00+00:00 False 38 .0 1 .54 1 .40 1 .60 -0.06 -3.75 2 523 .0 29 .42 13 97 PAYX call 2020 -12-18 00 :00:00+00:00 False 82 .5 3 .80 3 .80 4 .20 0 .00 NaN 4 1391 .0 29 .74 14 93 ORCL call 2020 -12-18 00 :00:00+00:00 False 62 .5 2 .53 2 .47 2 .60 0 .08 3 .27 27 9815 .0 30 .14 15 139 WABC call 2021 -01-15 00 :00:00+00:00 False 65 .0 0 .80 0 .75 1 .05 0 .00 None 2 22 .0 30 .74 16 22 BLK call 2021 -01-15 00 :00:00+00:00 False 620 .0 32 .10 28 .00 36 .20 1 .75 5 .77 46 140 .0 31 .83 17 88 NKE call 2021 -01-15 00 :00:00+00:00 False 135 .0 6 .85 6 .70 6 .85 0 .35 5 .38 92 2130 .0 31 .89 18 74 KSU call 2020 -12-18 00 :00:00+00:00 False 190 .0 8 .40 6 .20 9 .00 0 .78 10 .24 1 57 .0 32 .46 19 21 BK call 2020 -12-18 00 :00:00+00:00 False 40 .0 1 .20 1 .10 1 .25 0 .15 14 .29 150 2705 .0 32 .86 20 50 FRC call 2021 -02-19 00 :00:00+00:00 False 125 .0 1 .66 8 .40 9 .20 0 .00 NaN 1 4 .0 32 .98 21 144 WNS call 2021 -01-15 00 :00:00+00:00 False 75 .0 1 .15 1 .45 1 .90 0 .00 None 48 103 .0 33 .03 22 41 DPZ call 2020 -12-18 00 :00:00+00:00 False 400 .0 18 .00 15 .00 18 .90 -7.10 -28.29 147 265 .0 33 .77 23 28 CASY call 2021 -02-19 00 :00:00+00:00 False 185 .0 10 .90 10 .50 14 .20 0 .00 None NaN 8 .0 34 .07 24 102 PNC call 2021 -01-15 00 :00:00+00:00 False 120 .0 6 .30 5 .70 6 .20 -0.60 -8.7 21 451 .0 34 .17 25 111 RPM call 2021 -02-19 00 :00:00+00:00 False 90 .0 5 .40 4 .00 6 .00 0 .00 NaN 2 178 .0 34 .38 26 47 FDS call 2020 -12-18 00 :00:00+00:00 False 330 .0 16 .01 14 .50 18 .50 0 .00 None 1 38 .0 34 .64 27 61 JBHT call 2021 -01-15 00 :00:00+00:00 False 140 .0 6 .50 6 .20 7 .60 -0.40 -5.8 2 51 .0 34 .69 28 52 GS call 2021 -01-15 00 :00:00+00:00 False 210 .0 13 .50 13 .40 13 .70 -0.89 -6.18 236 3466 .0 34 .74 29 44 FAST call 2021 -01-15 00 :00:00+00:00 False 47 .5 2 .75 2 .60 2 .95 0 .10 3 .77 5 293 .0 34 .83 30 135 UNH call 2020 -12-18 00 :00:00+00:00 False 330 .0 17 .84 15 .75 18 .80 3 .24 22 .19 100 1289 .0 34 .84 31 121 STZ call 2021 -01-15 00 :00:00+00:00 False 190 .0 10 .30 10 .10 11 .90 0 .50 5 .1 41 744 .0 34 .92 32 19 AZO call 2020 -12-18 00 :00:00+00:00 False 1140 .0 72 .00 60 .90 68 .50 0 .00 NaN 1 5 .0 35 .27 33 101 PRGS call 2020 -12-18 00 :00:00+00:00 False 45 .0 0 .67 0 .60 0 .90 0 .00 NaN 6 399 .0 35 .60 34 69 JPM call 2020 -12-18 00 :00:00+00:00 False 105 .0 4 .55 4 .50 4 .65 -0.63 -12.16 280 12567 .0 35 .66 35 65 INFY call 2021 -01-15 00 :00:00+00:00 False 16 .0 0 .75 0 .70 0 .80 0 .15 25 31 328 .0 36 .08 36 84 MS call 2020 -12-18 00 :00:00+00:00 False 50 .0 2 .52 2 .53 2 .58 -0.21 -7.69 2415 1027 .0 36 .55 37 39 CTAS call 2020 -12-18 00 :00:00+00:00 False 340 .0 19 .75 17 .10 21 .50 0 .00 NaN 2 14 .0 36 .91 38 54 HDS call 2020 -12-18 00 :00:00+00:00 False 45 .0 1 .80 1 .65 1 .90 0 .20 12 .5 3 176 .0 37 .23 39 13 BAC call 2020 -12-18 00 :00:00+00:00 False 26 .0 1 .31 1 .31 1 .37 -0.05 -3.68 937 20691 .0 37 .55 40 33 CALM call 2020 -12-18 00 :00:00+00:00 False 40 .0 1 .50 1 .40 1 .70 -0.40 -21.05 20 49 .0 38 .09 41 7 ASML call 2021 -01-15 00 :00:00+00:00 False 390 .0 28 .40 27 .40 30 .00 4 .50 18 .83 3 479 .0 38 .13 42 114 SCHW call 2020 -12-18 00 :00:00+00:00 False 39 .0 1 .89 1 .98 2 .19 -0.01 -0.53 39 373 .0 38 .21 43 16 C call 2020 -12-18 00 :00:00+00:00 False 45 .0 2 .95 2 .91 2 .97 -0.10 -3.28 165 10174 .0 38 .57 44 60 ISRG call 2020 -12-18 00 :00:00+00:00 False 740 .0 48 .00 43 .70 50 .40 13 .60 39 .53 5 217 .0 40 .06 45 129 TFC call 2020 -12-18 00 :00:00+00:00 False 45 .0 1 .97 1 .95 2 .25 -0.09 -4.37 2 3577 .0 40 .09 46 56 HELE call 2020 -12-18 00 :00:00+00:00 False 200 .0 7 .93 9 .80 12 .90 0 .00 NaN 2 12 .0 40 .09 47 75 LNDC call 2020 -12-18 00 :00:00+00:00 False 12 .5 0 .10 0 .05 0 .10 -0.05 -33.33 1 56 .0 40 .23 48 137 VFC call 2021 -01-15 00 :00:00+00:00 False 80 .0 4 .80 4 .90 5 .40 0 .00 NaN 7 160 .0 40 .33 49 79 LW call 2021 -01-15 00 :00:00+00:00 False 75 .0 5 .40 4 .80 5 .30 -0.60 -10 1 251 .0 40 .44 50 123 STT call 2021 -01-15 00 :00:00+00:00 False 67 .5 4 .70 4 .70 5 .10 1 .80 62 .07 2 145 .0 40 .87 51 134 USB call 2020 -12-18 00 :00:00+00:00 False 40 .0 2 .42 2 .19 2 .41 -0.19 -7.28 59 3619 .0 40 .92 52 1 ABM call 2021 -01-15 00 :00:00+00:00 False 40 .0 2 .11 1 .60 2 .00 0 .00 None 1 90 .0 41 .53 53 48 FDX call 2021 -01-15 00 :00:00+00:00 False 280 .0 19 .34 18 .95 19 .55 -0.96 -4.73 152 2159 .0 41 .57 54 9 AYI call 2020 -12-18 00 :00:00+00:00 False 100 .0 7 .90 5 .80 7 .10 -8.45 -51.68 125 24 .0 42 .15 55 36 CMC call 2020 -12-18 00 :00:00+00:00 False 23 .0 1 .50 1 .35 1 .50 0 .10 7 .14 24 1212 .0 42 .33 56 107 RGP call 2021 -02-19 00 :00:00+00:00 False 12 .5 0 .75 0 .65 0 .85 0 .75 None 56 347 .0 42 .53 57 8 ADBE call 2020 -12-18 00 :00:00+00:00 False 505 .0 33 .63 34 .30 35 .90 3 .82 12 .81 30 1044 .0 42 .76 58 125 TCOM call 2020 -12-18 00 :00:00+00:00 False 33 .0 2 .10 1 .80 2 .03 0 .00 NaN 54 2102 .0 42 .92 59 142 WFC call 2020 -12-18 00 :00:00+00:00 False 27 .5 1 .02 1 .01 1 .07 -0.04 -3.77 550 31241 .0 43 .31 60 130 TSM call 2020 -12-18 00 :00:00+00:00 False 90 .0 6 .15 6 .00 6 .20 0 .45 7 .89 406 1115 .0 43 .87 61 82 MTN call 2020 -12-18 00 :00:00+00:00 False 250 .0 9 .00 11 .10 14 .90 0 .00 NaN 1 45 .0 44 .12 62 138 VRNT call 2020 -12-18 00 :00:00+00:00 False 55 .0 2 .80 2 .95 3 .30 0 .30 12 2 3136 .0 44 .12 63 141 WBA call 2020 -12-18 00 :00:00+00:00 False 37 .5 2 .01 1 .58 2 .33 -0.18 -8.22 1 370 .0 44 .92 64 42 EDU call 2021 -01-15 00 :00:00+00:00 False 175 .0 7 .18 12 .60 13 .60 0 .00 NaN 1 15 .0 45 .00 65 72 LEN call 2021 -01-15 00 :00:00+00:00 False 85 .0 7 .30 7 .20 7 .40 -0.20 -2.67 22 832 .0 45 .29 66 66 JBL call 2020 -12-18 00 :00:00+00:00 False 37 .0 2 .45 2 .20 2 .65 0 .35 16 .67 1 12 .0 46 .51 67 43 EPAC call 2021 -02-19 00 :00:00+00:00 False 20 .0 1 .55 1 .25 2 .05 0 .00 None 153 289 .0 46 .63 68 35 CVGW call 2021 -01-15 00 :00:00+00:00 False 70 .0 4 .00 3 .90 6 .00 0 .00 None NaN 4 .0 46 .89 69 68 KMX call 2021 -01-15 00 :00:00+00:00 False 95 .0 8 .00 7 .90 9 .20 -0.90 -10.11 17 944 .0 47 .31 70 85 MU call 2020 -12-18 00 :00:00+00:00 False 50 .0 4 .00 4 .00 4 .10 4 .00 None 444 994 .0 48 .05 71 80 LULU call 2020 -12-18 00 :00:00+00:00 False 350 .0 26 .80 26 .80 27 .25 3 .35 14 .29 123 480 .0 48 .07 72 40 DRI call 2021 -01-15 00 :00:00+00:00 False 105 .0 8 .80 8 .20 8 .80 0 .44 5 .26 3 857 .0 48 .21 73 57 HOMB call 2020 -12-18 00 :00:00+00:00 False 17 .5 0 .90 0 .70 1 .20 0 .00 None 55 187 .0 49 .22 74 11 APOG call 2021 -02-19 00 :00:00+00:00 False 30 .0 1 .35 1 .40 1 .50 0 .22 19 .47 2 204 .0 49 .71 75 73 LEVI call 2021 -01-15 00 :00:00+00:00 False 16 .0 1 .20 1 .20 1 .25 -0.25 -17.24 100 1362 .0 50 .44 76 140 WB call 2021 -01-15 00 :00:00+00:00 False 45 .0 2 .88 2 .55 3 .10 -0.02 -0.69 16 1531 .0 50 .46 77 143 WOR call 2020 -12-18 00 :00:00+00:00 False 50 .0 3 .13 2 .15 3 .30 0 .23 7 .93 7 359 .0 50 .76 78 67 KBH call 2021 -01-15 00 :00:00+00:00 False 45 .0 2 .80 2 .60 2 .80 0 .44 18 .64 17 271 .0 50 .98 79 26 ALLY call 2020 -12-18 00 :00:00+00:00 False 28 .0 2 .57 2 .20 2 .59 0 .15 6 .2 35 1403 .0 51 .07 80 99 PHR call 2021 -01-15 00 :00:00+00:00 False 35 .0 2 .50 1 .85 2 .60 0 .30 13 .64 1 49 .0 51 .51 81 17 AVAV call 2020 -12-18 00 :00:00+00:00 False 75 .0 5 .00 4 .40 5 .20 0 .71 16 .55 4 104 .0 51 .79 82 18 BB call 2020 -12-18 00 :00:00+00:00 False 5 .0 0 .31 0 .30 0 .33 0 .01 3 .33 18 1416 .0 51 .95 83 34 CMD call 2020 -12-18 00 :00:00+00:00 False 50 .0 2 .65 2 .75 3 .70 0 .00 NaN 3 3 .0 52 .47 84 90 NEOG call 2021 -01-15 00 :00:00+00:00 False 80 .0 7 .00 2 .50 7 .50 0 .00 None 2 15 .0 54 .53 85 146 ZS call 2021 -01-15 00 :00:00+00:00 False 155 .0 15 .85 14 .75 16 .65 1 .45 10 .07 115 1113 .0 54 .60 86 109 SCHL call 2020 -12-18 00 :00:00+00:00 False 22 .5 1 .45 1 .20 1 .70 0 .00 NaN 5 13 .0 54 .79 87 6 ANGO call 2021 -01-15 00 :00:00+00:00 False 12 .5 1 .02 0 .70 1 .25 0 .00 NaN 3 36 .0 55 .47 88 49 FUL call 2021 -02-19 00 :00:00+00:00 False 50 .0 4 .20 2 .75 6 .30 0 .00 None 1 126 .0 55 .47 89 30 CBRL call 2020 -12-18 00 :00:00+00:00 False 120 .0 8 .60 7 .70 10 .60 0 .00 None 2 141 .0 55 .54 90 120 SLB call 2020 -12-18 00 :00:00+00:00 False 17 .5 1 .07 1 .03 1 .11 1 .07 None 8 58 .0 55 .76 91 147 ZUMZ call 2021 -02-19 00 :00:00+00:00 False 35 .0 2 .66 2 .65 3 .00 0 .00 NaN 2 37 .0 56 .10 92 24 CAMP call 2020 -12-18 00 :00:00+00:00 False 10 .0 0 .20 0 .00 0 .40 0 .00 None 10 570 .0 56 .25 93 98 OSH call 2021 -04-16 00 :00:00+00:00 False 65 .0 4 .76 2 .50 6 .30 4 .76 None 100 101 .0 56 .38 94 64 HQY call 2020 -12-18 00 :00:00+00:00 False 60 .0 3 .50 3 .40 3 .70 0 .00 NaN 1 584 .0 56 .49 95 32 COUP call 2020 -12-18 00 :00:00+00:00 False 310 .0 29 .00 27 .30 28 .60 5 .33 22 .52 7 78 .0 57 .75 96 77 LMNR call 2020 -12-18 00 :00:00+00:00 False 15 .0 1 .25 1 .05 1 .95 0 .00 None 2 2 .0 58 .20 97 127 THO call 2020 -12-18 00 :00:00+00:00 False 97 .5 9 .00 9 .20 9 .70 -6.20 -40.79 11 27 .0 58 .96 98 110 RH call 2021 -01-15 00 :00:00+00:00 False 380 .0 44 .15 41 .60 43 .30 -0.07 -0.16 8 412 .0 60 .54 99 89 NG call 2020 -12-18 00 :00:00+00:00 False 12 .0 0 .77 0 .85 1 .05 0 .00 NaN 20 1163 .0 60 .64 100 37 CMTL call 2021 -01-15 00 :00:00+00:00 False 17 .5 1 .75 1 .55 1 .70 0 .55 45 .83 1 312 .0 60 .94 101 5 AEO call 2021 -01-15 00 :00:00+00:00 False 16 .0 1 .70 1 .55 1 .80 -0.20 -10.53 20 270 .0 62 .40 102 112 SCWX call 2021 -01-15 00 :00:00+00:00 False 12 .5 1 .00 1 .15 1 .30 0 .00 None 61 148 .0 62 .70 103 103 RFIL call 2021 -01-15 00 :00:00+00:00 False 5 .0 0 .35 0 .30 0 .50 0 .00 None 9 122 .0 63 .67 104 148 WORK call 2020 -12-18 00 :00:00+00:00 False 32 .0 3 .00 2 .95 3 .05 0 .51 20 .48 608 8478 .0 63 .84 105 4 AA call 2020 -12-18 00 :00:00+00:00 False 13 .0 1 .26 1 .16 1 .24 0 .00 NaN 6 145 .0 64 .70 106 29 CHWY call 2021 -01-15 00 :00:00+00:00 False 65 .0 6 .90 6 .80 6 .95 1 .31 23 .43 449 3579 .0 65 .43 107 119 SLQT call 2021 -01-15 00 :00:00+00:00 False 20 .0 2 .40 2 .35 2 .60 -0.20 -7.69 12 361 .0 65 .63 108 38 DAL call 2020 -12-18 00 :00:00+00:00 False 33 .0 3 .65 3 .55 3 .80 0 .00 NaN 19 1220 .0 66 .26 109 126 SNBR call 2020 -12-18 00 :00:00+00:00 False 60 .0 3 .50 4 .20 5 .10 0 .00 NaN 5 129 .0 66 .75 110 117 SGH call 2020 -12-18 00 :00:00+00:00 False 30 .0 1 .00 0 .50 2 .25 -0.05 -4.76 1 79 .0 68 .07 111 131 UEPS call 2021 -01-15 00 :00:00+00:00 False 4 .0 0 .38 0 .15 0 .40 0 .00 None 63 326 .0 68 .36 112 87 NAV call 2020 -12-18 00 :00:00+00:00 False 46 .0 2 .70 0 .20 5 .00 2 .70 None 3 0 .0 70 .92 113 86 NCNO call 2021 -02-19 00 :00:00+00:00 False 80 .0 13 .54 13 .00 13 .90 0 .84 6 .61 8 52 .0 71 .03 114 124 TACO call 2020 -12-18 00 :00:00+00:00 False 10 .0 0 .94 0 .80 1 .05 0 .09 10 .59 14 893 .0 71 .09 115 132 UNFI call 2021 -02-19 00 :00:00+00:00 False 17 .5 2 .75 2 .50 3 .00 0 .05 1 .85 58 550 .0 72 .07 116 78 MCFT call 2021 -01-15 00 :00:00+00:00 False 20 .0 2 .95 2 .55 3 .40 0 .00 NaN 1 16 .0 72 .75 117 115 SFIX call 2020 -12-18 00 :00:00+00:00 False 32 .0 3 .39 3 .65 3 .85 -0.20 -5.57 24 277 .0 73 .05 118 62 HMY call 2021 -01-15 00 :00:00+00:00 False 6 .0 0 .90 0 .75 1 .00 0 .20 28 .57 24 1835 .0 73 .24 119 104 REVG call 2021 -01-15 00 :00:00+00:00 False 10 .0 0 .50 0 .45 1 .20 0 .00 None 5 43 .0 73 .44 120 100 PTON call 2021 -01-15 00 :00:00+00:00 False 125 .0 19 .00 17 .50 19 .00 3 .87 25 .58 198 1423 .0 75 .85 121 14 BBBY call 2020 -12-18 00 :00:00+00:00 False 22 .0 2 .67 2 .59 2 .69 -0.26 -8.87 12 549 .0 77 .34 122 145 VITL call 2021 -01-15 00 :00:00+00:00 False 40 .0 7 .00 5 .30 6 .90 0 .00 NaN 3 10 .0 77 .73 123 136 UAL call 2020 -12-18 00 :00:00+00:00 False 38 .0 4 .70 4 .60 4 .70 0 .40 9 .3 42 1094 .0 78 .32 124 12 APHA call 2021 -01-15 00 :00:00+00:00 False 6 .0 0 .82 0 .80 0 .85 -0.07 -7.87 150 5032 .0 78 .71 125 70 LAKE call 2021 -01-15 00 :00:00+00:00 False 25 .0 2 .85 2 .75 3 .10 0 .60 26 .67 68 972 .0 79 .88 126 128 TNP call 2020 -12-18 00 :00:00+00:00 False 10 .0 0 .50 0 .45 0 .60 -0.13 -20.63 61 267 .0 80 .47 127 105 RAD call 2021 -01-15 00 :00:00+00:00 False 11 .0 1 .30 1 .09 1 .53 -0.09 -6.47 45 367 .0 80 .76 128 45 EPM call 2021 -01-15 00 :00:00+00:00 False 2 .5 0 .30 0 .05 0 .50 0 .10 50 2 71 .0 85 .16 129 23 BRC call 2021 -05-21 00 :00:00+00:00 False 45 .0 3 .40 0 .20 10 .00 0 .00 None None 32 .0 86 .30 130 51 GIII call 2020 -12-18 00 :00:00+00:00 False 17 .5 1 .45 1 .45 1 .70 0 .00 NaN 9 492 .0 87 .74 131 25 CCL call 2021 -01-15 00 :00:00+00:00 False 17 .5 2 .21 2 .10 2 .21 0 .09 4 .25 7323 25364 .0 87 .94 132 46 FLR call 2021 -01-15 00 :00:00+00:00 False 12 .5 1 .46 1 .35 1 .50 -0.03 -2.01 327 4591 .0 89 .06 133 76 LOVE call 2021 -01-15 00 :00:00+00:00 False 35 .0 6 .17 5 .40 6 .20 1 .17 23 .4 8 72 .0 89 .40 134 3 AGTC call 2021 -01-15 00 :00:00+00:00 False 7 .5 0 .50 0 .35 0 .65 0 .00 None 11 2942 .0 93 .95 135 91 MRTN call 2020 -12-18 00 :00:00+00:00 False 17 .5 1 .75 0 .00 2 .90 0 .00 None NaN 2 .0 98 .39 136 63 JKS call 2020 -12-18 00 :00:00+00:00 False 65 .0 10 .00 8 .70 11 .00 3 .80 61 .29 120 277 .0 99 .05 137 96 PLAY call 2021 -01-15 00 :00:00+00:00 False 17 .5 2 .85 2 .65 2 .90 0 .05 1 .79 106 1772 .0 100 .44 138 20 BIGC call 2021 -01-15 00 :00:00+00:00 False 100 .0 19 .24 19 .00 19 .35 2 .88 17 .6 70 1036 .0 100 .83 139 92 NTWK call 2021 -01-15 00 :00:00+00:00 False 5 .0 0 .10 0 .00 0 .30 0 .00 NaN 5 68 .0 103 .52 140 108 RLGT call 2020 -12-18 00 :00:00+00:00 False 7 .5 0 .10 0 .00 0 .80 0 .00 None 2 17 .0 112 .50 141 58 ICMB call 2021 -01-15 00 :00:00+00:00 False 5 .0 0 .20 0 .00 0 .50 0 .00 None 30 126 .0 117 .19 142 113 SANW call 2021 -02-19 00 :00:00+00:00 False 2 .5 1 .11 0 .00 1 .25 0 .00 None 12 6 .0 122 .66 143 2 ACB call 2020 -12-18 00 :00:00+00:00 False 6 .0 0 .75 0 .62 0 .88 0 .00 NaN 255 1199 .0 124 .22 144 83 MEIP call 2020 -12-18 00 :00:00+00:00 False 5 .0 0 .20 0 .20 0 .25 0 .00 None 6 12699 .0 127 .73 145 106 QTT call 2021 -01-15 00 :00:00+00:00 False 5 .0 0 .25 0 .10 0 .35 0 .10 66 .67 3 285 .0 132 .42 146 53 GME call 2020 -12-18 00 :00:00+00:00 False 13 .0 2 .49 2 .45 2 .76 2 .49 None 101 27 .0 143 .85 147 118 SEAC call 2021 -01-15 00 :00:00+00:00 False 2 .5 0 .05 0 .00 0 .15 0 .00 None 1 1805 .0 169 .53 148 15 BCLI call 2020 -12-18 00 :00:00+00:00 False 20 .0 7 .00 6 .60 7 .50 0 .04 0 .57 37 764 .0 266 .89 Full Script from concurrent.futures import as_completed , ThreadPoolExecutor from nitter_scraper import NitterScraper import pandas from requests_whaor import RequestsWhaor from yfs import fuzzy_search , get_options_page watchlist = [] # Lets scrape the first page of eWhispers twitter feed for a list of symbols. with NitterScraper ( port = 8008 ) as nitter : for tweet in nitter . get_tweets ( \"eWhispers\" , pages = 1 ): if tweet . is_pinned : # Lets skip the pinned tweet. continue if tweet . is_retweet : # Lets skip any retweets. continue if tweet . entries . cashtags : # Lets check if cashtags exists in the tweet then add them to the watchlist. watchlist += tweet . entries . cashtags print ( \".\" , end = \"\" , flush = True ) # Quick little progress_bar so we don't get bored. print () # Print new line when complete just to make things look a little cleaner. watchlist = sorted ( set ( map ( lambda cashtag : cashtag . replace ( \"$\" , \"\" ) . strip (), watchlist ))) # Lets sort, remove duplicates, and clean '$' strings from each symbols. valid_symbols = [] # Used to store symbols validated with the fuzzy_search function. call_chains = [] # Used to store all the found call option chains. # Decide on how many threads and proxies your computer can handle MAX_THREADS = 6 # Each proxy is a tor circuit running inside a separate docker container. MAX_PROXIES = 6 with RequestsWhaor ( onion_count = MAX_PROXIES , max_threads = MAX_THREADS ) as request_whaor : # RequestsWhaor will spin up a network of TOR nodes we will use as a rotating proxy. with ThreadPoolExecutor ( max_workers = MAX_THREADS ) as executor : futures = [ executor . submit ( fuzzy_search , ticker , session = request_whaor ) # ^--Here we pass request_whaor as a session like object. for ticker in watchlist ] for future in as_completed ( futures ): result = future . result ( timeout = 60 ) print ( \".\" , end = \"\" , flush = True ) # Quick progress bar. if result : # Now we append the results to the valid_symbols list. valid_symbols . append ( result ) # Lets get the raw symbol from each ValidSymbol object. valid_symbols = [ ticker . symbol for ticker in valid_symbols ] print ( \"found\" , len ( valid_symbols )) # Number of valid symbols found. request_whaor . restart_onions () # Lets get a fresh pool of proxies before the next step. futures = [ executor . submit ( get_options_page , ticker , after_days = 60 , # Lets get options that have at least 60 days before expiring. first_chain = True , # We only want the first expiration with all strike prices. use_fuzzy_search = False , # We did fuzzy search already no need to do it again. session = request_whaor , # pass request_whaor as a session like object. page_not_found_ok = True , # return None if the symbol doesn't have an option page. timeout = 5 , # Pass a 5 second timeout to the session. ) for ticker in valid_symbols ] for future in as_completed ( futures ): try : result = future . result ( timeout = 120 ) print ( \".\" , end = \"\" , flush = True ) # Progress bar. if result : if result . calls : # If the results have a call option chain we will append it to the list. call_chains . append ( result . calls ) except Exception as exc : # We will pass on any exceptions. print ( exc ) first_otm_strike = [] for chain in call_chains : df = chain . dataframe otm = df [ df [ \"in_the_money\" ] == False ] . head ( 1 ) if otm is not None : first_otm_strike . append ( otm ) final = pandas . concat ( first_otm_strike , ignore_index = True ) final . drop ( columns = [ \"timestamp\" , \"contract_name\" ], inplace = True ) final . sort_values ( by = \"implied_volatility\" , inplace = True ) final . reset_index ( inplace = True ) print ( final . to_string ())","title":"Extra Watchlist Example"},{"location":"examples/extra-watchlist-example/#how-to-build-a-one-delta-otm-call-options-watchlist-from-twitter-cashtags","text":"","title":"How to build a one delta OTM call options watchlist from twitter cashtags."},{"location":"examples/extra-watchlist-example/#overview","text":"First, we will scrape a users tweets for cashtags with nitter_scraper Next, we will prepare and clean the tweet data to build a watchlist. After that, we will startup a network of tor nodes behind a reverse proxy, to bypass the yahoo finance rate limit, using requests-whaor Last, we will download, clean, and concatenate all the options data into a single DataFrame.","title":"Overview"},{"location":"examples/extra-watchlist-example/#requirements","text":"Docker Engine installed. python ^3.8 poetry","title":"Requirements"},{"location":"examples/extra-watchlist-example/#dependencies","text":"yfs nitter_scraper requests-whaor Note requests-whaor will create multiple TOR nodes enclosed in docker containers to proxy your requests.","title":"Dependencies"},{"location":"examples/extra-watchlist-example/#environment-preparation","text":"Run the following commands to build a folder and initiate a poetry project. $ mkdir yfs_watchlist $ cd yfs_watchlist $ poetry init Keep hitting the enter button until you are out of the poetry init prompt. Now lets add the dependencies. $ poetry add nitter-scraper $ poetry add requests-whaor $ poetry add yfs Create options_bot.py $ touch options_bot.py Open options_bot.py in your favorite editor.","title":"Environment Preparation"},{"location":"examples/extra-watchlist-example/#imports","text":"from concurrent.futures import as_completed , ThreadPoolExecutor The ThreadPoolExecutor is used to call fuzzy_search and get_options_page functions asynchronously with a pool of threads. from nitter_scraper import NitterScraper The nitter_scraper library is used to scrape tweets. import pandas The pandas library is used to clean and concatenate the DataFrames. from requests_whaor import RequestsWhaor The requests_whaor library will supply a rotating proxy server to send our requests through, giving each request a unique IP address. If a request times out or gets a error code from the server it will retry with another IP address. from yfs import fuzzy_search , get_options_page Last we use these yfs functions to search for valid symbols and get options data. from concurrent.futures import as_completed , ThreadPoolExecutor from nitter_scraper import NitterScraper import pandas from requests_whaor import RequestsWhaor from yfs import fuzzy_search , get_options_page The imports should look like this.","title":"Imports"},{"location":"examples/extra-watchlist-example/#scrape-twitter-and-build-a-watchlist","text":"watchlist = [] # Lets scrape the first page of eWhispers twitter feed for a list of symbols. with NitterScraper ( port = 8008 ) as nitter : for tweet in nitter . get_tweets ( \"eWhispers\" , pages = 1 ): if tweet . is_pinned : # Lets skip the pinned tweet. continue if tweet . is_retweet : # Lets skip any retweets. continue if tweet . entries . cashtags : # Lets check if cashtags exists in the tweet then add them to the watchlist. watchlist += tweet . entries . cashtags print ( \".\" , end = \"\" , flush = True ) # Quick little progress bar so we don't get bored. print () # Print a new line when complete just to make things look a little cleaner. watchlist = sorted ( set ( map ( lambda cashtag : cashtag . replace ( \"$\" , \"\" ) . strip (), watchlist ))) # Lets sort, remove duplicates, and clean '$' strings from each symbol. Now we have a dynamically generated list of potentially interesting stock symbols. valid_symbols = [] # Used to store symbols validated with the fuzzy_search function. call_chains = [] # Used to store all the found call option chains. # Decide on how many threads and proxies your computer can handle MAX_THREADS = 6 # Each proxy is a tor circuit running inside a separate docker container. MAX_PROXIES = 6 Now on to the meat of the code. with RequestsWhaor ( onion_count = MAX_PROXIES , max_threads = MAX_THREADS ) as request_whaor : # RequestsWhaor will spin up a network of TOR nodes we will use as a rotating proxy. with ThreadPoolExecutor ( max_workers = MAX_THREADS ) as executor : futures = [ executor . submit ( fuzzy_search , ticker , session = request_whaor ) # ^--Here we pass request_whaor as a session like object for yfs fuzzy_search. for ticker in watchlist ] for future in as_completed ( futures ): result = future . result ( timeout = 60 ) print ( \".\" , end = \"\" , flush = True ) # Quick progress bar. if result : # Now we append the results to the valid_symbols list. valid_symbols . append ( result ) # Lets get the raw symbol from each ValidSymbol object. valid_symbols = [ ticker . symbol for ticker in valid_symbols ] print ( \"found\" , len ( valid_symbols )) # Number of valid symbols found. request_whaor . restart_onions () # Lets get a fresh pool of proxies before the next step. futures = [ executor . submit ( get_options_page , ticker , after_days = 60 , # Lets get options that have at least 60 days before expiring. first_chain = True , # We only want the first expiration with all strike prices. use_fuzzy_search = False , # We did fuzzy search already no need to do it again. session = request_whaor , # pass request_whaor as a session like object to yfs. page_not_found_ok = True , # return None if the symbol doesn't have an option page. timeout = 5 , # Pass a 5 second timeout to the session. ) for ticker in valid_symbols ] for future in as_completed ( futures ): try : result = future . result ( timeout = 120 ) print ( \".\" , end = \"\" , flush = True ) # Progress bar. if result : if result . calls : # If the results have a call option chain we will append it to the list. call_chains . append ( result . calls ) except Exception as exc : # We will pass on any exceptions. print ( exc ) Note ThreadPoolExecutor information here.","title":"Scrape Twitter and build a watchlist"},{"location":"examples/extra-watchlist-example/#final-section","text":"First, iterate over the result. Then, convert each chain into a dataframe. Next, get the first out of the money option and append it to a list. After that, concatenate the list of single option contract dataframes into a single dataframe. Now lets, drop some columns and sort by implied volatility to make things look pretty. Finally, print the results. first_otm_strike = [] for chain in call_chains : df = chain . dataframe otm = df [ df [ \"in_the_money\" ] == False ] . head ( 1 ) if otm is not None : first_otm_strike . append ( otm ) final = pandas . concat ( first_otm_strike , ignore_index = True ) final . drop ( columns = [ \"timestamp\" , \"contract_name\" ], inplace = True ) final . sort_values ( by = \"implied_volatility\" , inplace = True ) final . reset_index ( inplace = True ) print ( final . to_string ()) Now we have a single dataframe of one delta OTM call options built from a dynamically generated watch list. Output index symbol contract_type expiration_date in_the_money strike last_price bid ask change percent_change volume open_interest implied_volatility 0 122 SNX call 2020 -12-18 00 :00:00+00:00 False 155 .0 5 .92 0 .00 0 .00 0 .00 NaN 7 19 .0 1 .56 1 10 AZZ call 2021 -02-19 00 :00:00+00:00 False 40 .0 2 .00 0 .00 0 .00 0 .00 None 1 0 .0 3 .13 2 133 USAT call 2021 -01-15 00 :00:00+00:00 False 10 .0 1 .25 0 .00 0 .00 0 .00 None 2 41 .0 12 .50 3 116 SINA call 2020 -12-18 00 :00:00+00:00 False 45 .0 0 .05 0 .05 0 .50 0 .00 NaN 5 59 .0 18 .36 4 71 JNJ call 2020 -12-18 00 :00:00+00:00 False 155 .0 3 .75 3 .70 3 .80 0 .55 17 .19 150 3168 .0 21 .05 5 94 PEP call 2020 -12-18 00 :00:00+00:00 False 140 .0 4 .26 4 .15 4 .45 0 .10 2 .4 38 4826 .0 21 .51 6 31 COST call 2021 -01-15 00 :00:00+00:00 False 370 .0 18 .60 18 .50 18 .95 1 .46 8 .52 90 1326 .0 25 .29 7 55 GIS call 2021 -01-15 00 :00:00+00:00 False 62 .5 2 .99 2 .57 2 .99 0 .39 15 7 1501 .0 25 .78 8 59 INFO call 2020 -12-18 00 :00:00+00:00 False 80 .0 3 .46 2 .65 3 .10 0 .00 None 1 314 .0 27 .06 9 95 PGR call 2021 -01-15 00 :00:00+00:00 False 100 .0 5 .15 5 .00 5 .60 0 .65 14 .44 29 613 .0 27 .55 10 81 MKC call 2020 -12-18 00 :00:00+00:00 False 200 .0 7 .50 7 .10 7 .70 0 .50 7 .14 6 188 .0 27 .72 11 0 ACN call 2021 -01-15 00 :00:00+00:00 False 230 .0 12 .50 12 .40 13 .20 1 .50 13 .64 63 596 .0 29 .38 12 27 CAG call 2020 -12-18 00 :00:00+00:00 False 38 .0 1 .54 1 .40 1 .60 -0.06 -3.75 2 523 .0 29 .42 13 97 PAYX call 2020 -12-18 00 :00:00+00:00 False 82 .5 3 .80 3 .80 4 .20 0 .00 NaN 4 1391 .0 29 .74 14 93 ORCL call 2020 -12-18 00 :00:00+00:00 False 62 .5 2 .53 2 .47 2 .60 0 .08 3 .27 27 9815 .0 30 .14 15 139 WABC call 2021 -01-15 00 :00:00+00:00 False 65 .0 0 .80 0 .75 1 .05 0 .00 None 2 22 .0 30 .74 16 22 BLK call 2021 -01-15 00 :00:00+00:00 False 620 .0 32 .10 28 .00 36 .20 1 .75 5 .77 46 140 .0 31 .83 17 88 NKE call 2021 -01-15 00 :00:00+00:00 False 135 .0 6 .85 6 .70 6 .85 0 .35 5 .38 92 2130 .0 31 .89 18 74 KSU call 2020 -12-18 00 :00:00+00:00 False 190 .0 8 .40 6 .20 9 .00 0 .78 10 .24 1 57 .0 32 .46 19 21 BK call 2020 -12-18 00 :00:00+00:00 False 40 .0 1 .20 1 .10 1 .25 0 .15 14 .29 150 2705 .0 32 .86 20 50 FRC call 2021 -02-19 00 :00:00+00:00 False 125 .0 1 .66 8 .40 9 .20 0 .00 NaN 1 4 .0 32 .98 21 144 WNS call 2021 -01-15 00 :00:00+00:00 False 75 .0 1 .15 1 .45 1 .90 0 .00 None 48 103 .0 33 .03 22 41 DPZ call 2020 -12-18 00 :00:00+00:00 False 400 .0 18 .00 15 .00 18 .90 -7.10 -28.29 147 265 .0 33 .77 23 28 CASY call 2021 -02-19 00 :00:00+00:00 False 185 .0 10 .90 10 .50 14 .20 0 .00 None NaN 8 .0 34 .07 24 102 PNC call 2021 -01-15 00 :00:00+00:00 False 120 .0 6 .30 5 .70 6 .20 -0.60 -8.7 21 451 .0 34 .17 25 111 RPM call 2021 -02-19 00 :00:00+00:00 False 90 .0 5 .40 4 .00 6 .00 0 .00 NaN 2 178 .0 34 .38 26 47 FDS call 2020 -12-18 00 :00:00+00:00 False 330 .0 16 .01 14 .50 18 .50 0 .00 None 1 38 .0 34 .64 27 61 JBHT call 2021 -01-15 00 :00:00+00:00 False 140 .0 6 .50 6 .20 7 .60 -0.40 -5.8 2 51 .0 34 .69 28 52 GS call 2021 -01-15 00 :00:00+00:00 False 210 .0 13 .50 13 .40 13 .70 -0.89 -6.18 236 3466 .0 34 .74 29 44 FAST call 2021 -01-15 00 :00:00+00:00 False 47 .5 2 .75 2 .60 2 .95 0 .10 3 .77 5 293 .0 34 .83 30 135 UNH call 2020 -12-18 00 :00:00+00:00 False 330 .0 17 .84 15 .75 18 .80 3 .24 22 .19 100 1289 .0 34 .84 31 121 STZ call 2021 -01-15 00 :00:00+00:00 False 190 .0 10 .30 10 .10 11 .90 0 .50 5 .1 41 744 .0 34 .92 32 19 AZO call 2020 -12-18 00 :00:00+00:00 False 1140 .0 72 .00 60 .90 68 .50 0 .00 NaN 1 5 .0 35 .27 33 101 PRGS call 2020 -12-18 00 :00:00+00:00 False 45 .0 0 .67 0 .60 0 .90 0 .00 NaN 6 399 .0 35 .60 34 69 JPM call 2020 -12-18 00 :00:00+00:00 False 105 .0 4 .55 4 .50 4 .65 -0.63 -12.16 280 12567 .0 35 .66 35 65 INFY call 2021 -01-15 00 :00:00+00:00 False 16 .0 0 .75 0 .70 0 .80 0 .15 25 31 328 .0 36 .08 36 84 MS call 2020 -12-18 00 :00:00+00:00 False 50 .0 2 .52 2 .53 2 .58 -0.21 -7.69 2415 1027 .0 36 .55 37 39 CTAS call 2020 -12-18 00 :00:00+00:00 False 340 .0 19 .75 17 .10 21 .50 0 .00 NaN 2 14 .0 36 .91 38 54 HDS call 2020 -12-18 00 :00:00+00:00 False 45 .0 1 .80 1 .65 1 .90 0 .20 12 .5 3 176 .0 37 .23 39 13 BAC call 2020 -12-18 00 :00:00+00:00 False 26 .0 1 .31 1 .31 1 .37 -0.05 -3.68 937 20691 .0 37 .55 40 33 CALM call 2020 -12-18 00 :00:00+00:00 False 40 .0 1 .50 1 .40 1 .70 -0.40 -21.05 20 49 .0 38 .09 41 7 ASML call 2021 -01-15 00 :00:00+00:00 False 390 .0 28 .40 27 .40 30 .00 4 .50 18 .83 3 479 .0 38 .13 42 114 SCHW call 2020 -12-18 00 :00:00+00:00 False 39 .0 1 .89 1 .98 2 .19 -0.01 -0.53 39 373 .0 38 .21 43 16 C call 2020 -12-18 00 :00:00+00:00 False 45 .0 2 .95 2 .91 2 .97 -0.10 -3.28 165 10174 .0 38 .57 44 60 ISRG call 2020 -12-18 00 :00:00+00:00 False 740 .0 48 .00 43 .70 50 .40 13 .60 39 .53 5 217 .0 40 .06 45 129 TFC call 2020 -12-18 00 :00:00+00:00 False 45 .0 1 .97 1 .95 2 .25 -0.09 -4.37 2 3577 .0 40 .09 46 56 HELE call 2020 -12-18 00 :00:00+00:00 False 200 .0 7 .93 9 .80 12 .90 0 .00 NaN 2 12 .0 40 .09 47 75 LNDC call 2020 -12-18 00 :00:00+00:00 False 12 .5 0 .10 0 .05 0 .10 -0.05 -33.33 1 56 .0 40 .23 48 137 VFC call 2021 -01-15 00 :00:00+00:00 False 80 .0 4 .80 4 .90 5 .40 0 .00 NaN 7 160 .0 40 .33 49 79 LW call 2021 -01-15 00 :00:00+00:00 False 75 .0 5 .40 4 .80 5 .30 -0.60 -10 1 251 .0 40 .44 50 123 STT call 2021 -01-15 00 :00:00+00:00 False 67 .5 4 .70 4 .70 5 .10 1 .80 62 .07 2 145 .0 40 .87 51 134 USB call 2020 -12-18 00 :00:00+00:00 False 40 .0 2 .42 2 .19 2 .41 -0.19 -7.28 59 3619 .0 40 .92 52 1 ABM call 2021 -01-15 00 :00:00+00:00 False 40 .0 2 .11 1 .60 2 .00 0 .00 None 1 90 .0 41 .53 53 48 FDX call 2021 -01-15 00 :00:00+00:00 False 280 .0 19 .34 18 .95 19 .55 -0.96 -4.73 152 2159 .0 41 .57 54 9 AYI call 2020 -12-18 00 :00:00+00:00 False 100 .0 7 .90 5 .80 7 .10 -8.45 -51.68 125 24 .0 42 .15 55 36 CMC call 2020 -12-18 00 :00:00+00:00 False 23 .0 1 .50 1 .35 1 .50 0 .10 7 .14 24 1212 .0 42 .33 56 107 RGP call 2021 -02-19 00 :00:00+00:00 False 12 .5 0 .75 0 .65 0 .85 0 .75 None 56 347 .0 42 .53 57 8 ADBE call 2020 -12-18 00 :00:00+00:00 False 505 .0 33 .63 34 .30 35 .90 3 .82 12 .81 30 1044 .0 42 .76 58 125 TCOM call 2020 -12-18 00 :00:00+00:00 False 33 .0 2 .10 1 .80 2 .03 0 .00 NaN 54 2102 .0 42 .92 59 142 WFC call 2020 -12-18 00 :00:00+00:00 False 27 .5 1 .02 1 .01 1 .07 -0.04 -3.77 550 31241 .0 43 .31 60 130 TSM call 2020 -12-18 00 :00:00+00:00 False 90 .0 6 .15 6 .00 6 .20 0 .45 7 .89 406 1115 .0 43 .87 61 82 MTN call 2020 -12-18 00 :00:00+00:00 False 250 .0 9 .00 11 .10 14 .90 0 .00 NaN 1 45 .0 44 .12 62 138 VRNT call 2020 -12-18 00 :00:00+00:00 False 55 .0 2 .80 2 .95 3 .30 0 .30 12 2 3136 .0 44 .12 63 141 WBA call 2020 -12-18 00 :00:00+00:00 False 37 .5 2 .01 1 .58 2 .33 -0.18 -8.22 1 370 .0 44 .92 64 42 EDU call 2021 -01-15 00 :00:00+00:00 False 175 .0 7 .18 12 .60 13 .60 0 .00 NaN 1 15 .0 45 .00 65 72 LEN call 2021 -01-15 00 :00:00+00:00 False 85 .0 7 .30 7 .20 7 .40 -0.20 -2.67 22 832 .0 45 .29 66 66 JBL call 2020 -12-18 00 :00:00+00:00 False 37 .0 2 .45 2 .20 2 .65 0 .35 16 .67 1 12 .0 46 .51 67 43 EPAC call 2021 -02-19 00 :00:00+00:00 False 20 .0 1 .55 1 .25 2 .05 0 .00 None 153 289 .0 46 .63 68 35 CVGW call 2021 -01-15 00 :00:00+00:00 False 70 .0 4 .00 3 .90 6 .00 0 .00 None NaN 4 .0 46 .89 69 68 KMX call 2021 -01-15 00 :00:00+00:00 False 95 .0 8 .00 7 .90 9 .20 -0.90 -10.11 17 944 .0 47 .31 70 85 MU call 2020 -12-18 00 :00:00+00:00 False 50 .0 4 .00 4 .00 4 .10 4 .00 None 444 994 .0 48 .05 71 80 LULU call 2020 -12-18 00 :00:00+00:00 False 350 .0 26 .80 26 .80 27 .25 3 .35 14 .29 123 480 .0 48 .07 72 40 DRI call 2021 -01-15 00 :00:00+00:00 False 105 .0 8 .80 8 .20 8 .80 0 .44 5 .26 3 857 .0 48 .21 73 57 HOMB call 2020 -12-18 00 :00:00+00:00 False 17 .5 0 .90 0 .70 1 .20 0 .00 None 55 187 .0 49 .22 74 11 APOG call 2021 -02-19 00 :00:00+00:00 False 30 .0 1 .35 1 .40 1 .50 0 .22 19 .47 2 204 .0 49 .71 75 73 LEVI call 2021 -01-15 00 :00:00+00:00 False 16 .0 1 .20 1 .20 1 .25 -0.25 -17.24 100 1362 .0 50 .44 76 140 WB call 2021 -01-15 00 :00:00+00:00 False 45 .0 2 .88 2 .55 3 .10 -0.02 -0.69 16 1531 .0 50 .46 77 143 WOR call 2020 -12-18 00 :00:00+00:00 False 50 .0 3 .13 2 .15 3 .30 0 .23 7 .93 7 359 .0 50 .76 78 67 KBH call 2021 -01-15 00 :00:00+00:00 False 45 .0 2 .80 2 .60 2 .80 0 .44 18 .64 17 271 .0 50 .98 79 26 ALLY call 2020 -12-18 00 :00:00+00:00 False 28 .0 2 .57 2 .20 2 .59 0 .15 6 .2 35 1403 .0 51 .07 80 99 PHR call 2021 -01-15 00 :00:00+00:00 False 35 .0 2 .50 1 .85 2 .60 0 .30 13 .64 1 49 .0 51 .51 81 17 AVAV call 2020 -12-18 00 :00:00+00:00 False 75 .0 5 .00 4 .40 5 .20 0 .71 16 .55 4 104 .0 51 .79 82 18 BB call 2020 -12-18 00 :00:00+00:00 False 5 .0 0 .31 0 .30 0 .33 0 .01 3 .33 18 1416 .0 51 .95 83 34 CMD call 2020 -12-18 00 :00:00+00:00 False 50 .0 2 .65 2 .75 3 .70 0 .00 NaN 3 3 .0 52 .47 84 90 NEOG call 2021 -01-15 00 :00:00+00:00 False 80 .0 7 .00 2 .50 7 .50 0 .00 None 2 15 .0 54 .53 85 146 ZS call 2021 -01-15 00 :00:00+00:00 False 155 .0 15 .85 14 .75 16 .65 1 .45 10 .07 115 1113 .0 54 .60 86 109 SCHL call 2020 -12-18 00 :00:00+00:00 False 22 .5 1 .45 1 .20 1 .70 0 .00 NaN 5 13 .0 54 .79 87 6 ANGO call 2021 -01-15 00 :00:00+00:00 False 12 .5 1 .02 0 .70 1 .25 0 .00 NaN 3 36 .0 55 .47 88 49 FUL call 2021 -02-19 00 :00:00+00:00 False 50 .0 4 .20 2 .75 6 .30 0 .00 None 1 126 .0 55 .47 89 30 CBRL call 2020 -12-18 00 :00:00+00:00 False 120 .0 8 .60 7 .70 10 .60 0 .00 None 2 141 .0 55 .54 90 120 SLB call 2020 -12-18 00 :00:00+00:00 False 17 .5 1 .07 1 .03 1 .11 1 .07 None 8 58 .0 55 .76 91 147 ZUMZ call 2021 -02-19 00 :00:00+00:00 False 35 .0 2 .66 2 .65 3 .00 0 .00 NaN 2 37 .0 56 .10 92 24 CAMP call 2020 -12-18 00 :00:00+00:00 False 10 .0 0 .20 0 .00 0 .40 0 .00 None 10 570 .0 56 .25 93 98 OSH call 2021 -04-16 00 :00:00+00:00 False 65 .0 4 .76 2 .50 6 .30 4 .76 None 100 101 .0 56 .38 94 64 HQY call 2020 -12-18 00 :00:00+00:00 False 60 .0 3 .50 3 .40 3 .70 0 .00 NaN 1 584 .0 56 .49 95 32 COUP call 2020 -12-18 00 :00:00+00:00 False 310 .0 29 .00 27 .30 28 .60 5 .33 22 .52 7 78 .0 57 .75 96 77 LMNR call 2020 -12-18 00 :00:00+00:00 False 15 .0 1 .25 1 .05 1 .95 0 .00 None 2 2 .0 58 .20 97 127 THO call 2020 -12-18 00 :00:00+00:00 False 97 .5 9 .00 9 .20 9 .70 -6.20 -40.79 11 27 .0 58 .96 98 110 RH call 2021 -01-15 00 :00:00+00:00 False 380 .0 44 .15 41 .60 43 .30 -0.07 -0.16 8 412 .0 60 .54 99 89 NG call 2020 -12-18 00 :00:00+00:00 False 12 .0 0 .77 0 .85 1 .05 0 .00 NaN 20 1163 .0 60 .64 100 37 CMTL call 2021 -01-15 00 :00:00+00:00 False 17 .5 1 .75 1 .55 1 .70 0 .55 45 .83 1 312 .0 60 .94 101 5 AEO call 2021 -01-15 00 :00:00+00:00 False 16 .0 1 .70 1 .55 1 .80 -0.20 -10.53 20 270 .0 62 .40 102 112 SCWX call 2021 -01-15 00 :00:00+00:00 False 12 .5 1 .00 1 .15 1 .30 0 .00 None 61 148 .0 62 .70 103 103 RFIL call 2021 -01-15 00 :00:00+00:00 False 5 .0 0 .35 0 .30 0 .50 0 .00 None 9 122 .0 63 .67 104 148 WORK call 2020 -12-18 00 :00:00+00:00 False 32 .0 3 .00 2 .95 3 .05 0 .51 20 .48 608 8478 .0 63 .84 105 4 AA call 2020 -12-18 00 :00:00+00:00 False 13 .0 1 .26 1 .16 1 .24 0 .00 NaN 6 145 .0 64 .70 106 29 CHWY call 2021 -01-15 00 :00:00+00:00 False 65 .0 6 .90 6 .80 6 .95 1 .31 23 .43 449 3579 .0 65 .43 107 119 SLQT call 2021 -01-15 00 :00:00+00:00 False 20 .0 2 .40 2 .35 2 .60 -0.20 -7.69 12 361 .0 65 .63 108 38 DAL call 2020 -12-18 00 :00:00+00:00 False 33 .0 3 .65 3 .55 3 .80 0 .00 NaN 19 1220 .0 66 .26 109 126 SNBR call 2020 -12-18 00 :00:00+00:00 False 60 .0 3 .50 4 .20 5 .10 0 .00 NaN 5 129 .0 66 .75 110 117 SGH call 2020 -12-18 00 :00:00+00:00 False 30 .0 1 .00 0 .50 2 .25 -0.05 -4.76 1 79 .0 68 .07 111 131 UEPS call 2021 -01-15 00 :00:00+00:00 False 4 .0 0 .38 0 .15 0 .40 0 .00 None 63 326 .0 68 .36 112 87 NAV call 2020 -12-18 00 :00:00+00:00 False 46 .0 2 .70 0 .20 5 .00 2 .70 None 3 0 .0 70 .92 113 86 NCNO call 2021 -02-19 00 :00:00+00:00 False 80 .0 13 .54 13 .00 13 .90 0 .84 6 .61 8 52 .0 71 .03 114 124 TACO call 2020 -12-18 00 :00:00+00:00 False 10 .0 0 .94 0 .80 1 .05 0 .09 10 .59 14 893 .0 71 .09 115 132 UNFI call 2021 -02-19 00 :00:00+00:00 False 17 .5 2 .75 2 .50 3 .00 0 .05 1 .85 58 550 .0 72 .07 116 78 MCFT call 2021 -01-15 00 :00:00+00:00 False 20 .0 2 .95 2 .55 3 .40 0 .00 NaN 1 16 .0 72 .75 117 115 SFIX call 2020 -12-18 00 :00:00+00:00 False 32 .0 3 .39 3 .65 3 .85 -0.20 -5.57 24 277 .0 73 .05 118 62 HMY call 2021 -01-15 00 :00:00+00:00 False 6 .0 0 .90 0 .75 1 .00 0 .20 28 .57 24 1835 .0 73 .24 119 104 REVG call 2021 -01-15 00 :00:00+00:00 False 10 .0 0 .50 0 .45 1 .20 0 .00 None 5 43 .0 73 .44 120 100 PTON call 2021 -01-15 00 :00:00+00:00 False 125 .0 19 .00 17 .50 19 .00 3 .87 25 .58 198 1423 .0 75 .85 121 14 BBBY call 2020 -12-18 00 :00:00+00:00 False 22 .0 2 .67 2 .59 2 .69 -0.26 -8.87 12 549 .0 77 .34 122 145 VITL call 2021 -01-15 00 :00:00+00:00 False 40 .0 7 .00 5 .30 6 .90 0 .00 NaN 3 10 .0 77 .73 123 136 UAL call 2020 -12-18 00 :00:00+00:00 False 38 .0 4 .70 4 .60 4 .70 0 .40 9 .3 42 1094 .0 78 .32 124 12 APHA call 2021 -01-15 00 :00:00+00:00 False 6 .0 0 .82 0 .80 0 .85 -0.07 -7.87 150 5032 .0 78 .71 125 70 LAKE call 2021 -01-15 00 :00:00+00:00 False 25 .0 2 .85 2 .75 3 .10 0 .60 26 .67 68 972 .0 79 .88 126 128 TNP call 2020 -12-18 00 :00:00+00:00 False 10 .0 0 .50 0 .45 0 .60 -0.13 -20.63 61 267 .0 80 .47 127 105 RAD call 2021 -01-15 00 :00:00+00:00 False 11 .0 1 .30 1 .09 1 .53 -0.09 -6.47 45 367 .0 80 .76 128 45 EPM call 2021 -01-15 00 :00:00+00:00 False 2 .5 0 .30 0 .05 0 .50 0 .10 50 2 71 .0 85 .16 129 23 BRC call 2021 -05-21 00 :00:00+00:00 False 45 .0 3 .40 0 .20 10 .00 0 .00 None None 32 .0 86 .30 130 51 GIII call 2020 -12-18 00 :00:00+00:00 False 17 .5 1 .45 1 .45 1 .70 0 .00 NaN 9 492 .0 87 .74 131 25 CCL call 2021 -01-15 00 :00:00+00:00 False 17 .5 2 .21 2 .10 2 .21 0 .09 4 .25 7323 25364 .0 87 .94 132 46 FLR call 2021 -01-15 00 :00:00+00:00 False 12 .5 1 .46 1 .35 1 .50 -0.03 -2.01 327 4591 .0 89 .06 133 76 LOVE call 2021 -01-15 00 :00:00+00:00 False 35 .0 6 .17 5 .40 6 .20 1 .17 23 .4 8 72 .0 89 .40 134 3 AGTC call 2021 -01-15 00 :00:00+00:00 False 7 .5 0 .50 0 .35 0 .65 0 .00 None 11 2942 .0 93 .95 135 91 MRTN call 2020 -12-18 00 :00:00+00:00 False 17 .5 1 .75 0 .00 2 .90 0 .00 None NaN 2 .0 98 .39 136 63 JKS call 2020 -12-18 00 :00:00+00:00 False 65 .0 10 .00 8 .70 11 .00 3 .80 61 .29 120 277 .0 99 .05 137 96 PLAY call 2021 -01-15 00 :00:00+00:00 False 17 .5 2 .85 2 .65 2 .90 0 .05 1 .79 106 1772 .0 100 .44 138 20 BIGC call 2021 -01-15 00 :00:00+00:00 False 100 .0 19 .24 19 .00 19 .35 2 .88 17 .6 70 1036 .0 100 .83 139 92 NTWK call 2021 -01-15 00 :00:00+00:00 False 5 .0 0 .10 0 .00 0 .30 0 .00 NaN 5 68 .0 103 .52 140 108 RLGT call 2020 -12-18 00 :00:00+00:00 False 7 .5 0 .10 0 .00 0 .80 0 .00 None 2 17 .0 112 .50 141 58 ICMB call 2021 -01-15 00 :00:00+00:00 False 5 .0 0 .20 0 .00 0 .50 0 .00 None 30 126 .0 117 .19 142 113 SANW call 2021 -02-19 00 :00:00+00:00 False 2 .5 1 .11 0 .00 1 .25 0 .00 None 12 6 .0 122 .66 143 2 ACB call 2020 -12-18 00 :00:00+00:00 False 6 .0 0 .75 0 .62 0 .88 0 .00 NaN 255 1199 .0 124 .22 144 83 MEIP call 2020 -12-18 00 :00:00+00:00 False 5 .0 0 .20 0 .20 0 .25 0 .00 None 6 12699 .0 127 .73 145 106 QTT call 2021 -01-15 00 :00:00+00:00 False 5 .0 0 .25 0 .10 0 .35 0 .10 66 .67 3 285 .0 132 .42 146 53 GME call 2020 -12-18 00 :00:00+00:00 False 13 .0 2 .49 2 .45 2 .76 2 .49 None 101 27 .0 143 .85 147 118 SEAC call 2021 -01-15 00 :00:00+00:00 False 2 .5 0 .05 0 .00 0 .15 0 .00 None 1 1805 .0 169 .53 148 15 BCLI call 2020 -12-18 00 :00:00+00:00 False 20 .0 7 .00 6 .60 7 .50 0 .04 0 .57 37 764 .0 266 .89","title":"Final Section"},{"location":"examples/extra-watchlist-example/#full-script","text":"from concurrent.futures import as_completed , ThreadPoolExecutor from nitter_scraper import NitterScraper import pandas from requests_whaor import RequestsWhaor from yfs import fuzzy_search , get_options_page watchlist = [] # Lets scrape the first page of eWhispers twitter feed for a list of symbols. with NitterScraper ( port = 8008 ) as nitter : for tweet in nitter . get_tweets ( \"eWhispers\" , pages = 1 ): if tweet . is_pinned : # Lets skip the pinned tweet. continue if tweet . is_retweet : # Lets skip any retweets. continue if tweet . entries . cashtags : # Lets check if cashtags exists in the tweet then add them to the watchlist. watchlist += tweet . entries . cashtags print ( \".\" , end = \"\" , flush = True ) # Quick little progress_bar so we don't get bored. print () # Print new line when complete just to make things look a little cleaner. watchlist = sorted ( set ( map ( lambda cashtag : cashtag . replace ( \"$\" , \"\" ) . strip (), watchlist ))) # Lets sort, remove duplicates, and clean '$' strings from each symbols. valid_symbols = [] # Used to store symbols validated with the fuzzy_search function. call_chains = [] # Used to store all the found call option chains. # Decide on how many threads and proxies your computer can handle MAX_THREADS = 6 # Each proxy is a tor circuit running inside a separate docker container. MAX_PROXIES = 6 with RequestsWhaor ( onion_count = MAX_PROXIES , max_threads = MAX_THREADS ) as request_whaor : # RequestsWhaor will spin up a network of TOR nodes we will use as a rotating proxy. with ThreadPoolExecutor ( max_workers = MAX_THREADS ) as executor : futures = [ executor . submit ( fuzzy_search , ticker , session = request_whaor ) # ^--Here we pass request_whaor as a session like object. for ticker in watchlist ] for future in as_completed ( futures ): result = future . result ( timeout = 60 ) print ( \".\" , end = \"\" , flush = True ) # Quick progress bar. if result : # Now we append the results to the valid_symbols list. valid_symbols . append ( result ) # Lets get the raw symbol from each ValidSymbol object. valid_symbols = [ ticker . symbol for ticker in valid_symbols ] print ( \"found\" , len ( valid_symbols )) # Number of valid symbols found. request_whaor . restart_onions () # Lets get a fresh pool of proxies before the next step. futures = [ executor . submit ( get_options_page , ticker , after_days = 60 , # Lets get options that have at least 60 days before expiring. first_chain = True , # We only want the first expiration with all strike prices. use_fuzzy_search = False , # We did fuzzy search already no need to do it again. session = request_whaor , # pass request_whaor as a session like object. page_not_found_ok = True , # return None if the symbol doesn't have an option page. timeout = 5 , # Pass a 5 second timeout to the session. ) for ticker in valid_symbols ] for future in as_completed ( futures ): try : result = future . result ( timeout = 120 ) print ( \".\" , end = \"\" , flush = True ) # Progress bar. if result : if result . calls : # If the results have a call option chain we will append it to the list. call_chains . append ( result . calls ) except Exception as exc : # We will pass on any exceptions. print ( exc ) first_otm_strike = [] for chain in call_chains : df = chain . dataframe otm = df [ df [ \"in_the_money\" ] == False ] . head ( 1 ) if otm is not None : first_otm_strike . append ( otm ) final = pandas . concat ( first_otm_strike , ignore_index = True ) final . drop ( columns = [ \"timestamp\" , \"contract_name\" ], inplace = True ) final . sort_values ( by = \"implied_volatility\" , inplace = True ) final . reset_index ( inplace = True ) print ( final . to_string ())","title":"Full Script"},{"location":"examples/fuzzy-search-examples/","text":"Fuzzy Search Examples How to check if a symbol exists. from yfs import fuzzy_search result = fuzzy_search ( \"aapl\" ) print ( result . json ( indent = 4 )) Note fuzzy_search returns a ValidSymbol or ValidSymbolList object. Use the .json or .dict method to serialize these objects. How to search for a company by name. from yfs import fuzzy_search results = fuzzy_search ( \"Apple\" ) print ( results ) How to get the full search list. from yfs import fuzzy_search results = fuzzy_search ( \"Apple\" , first_ticker = False ) print ( results . json ( indent = 4 )) for ticker in results : print ( ticker . json ( indent = 4 )) Note If the first_ticker argument is set to true fuzzy_search will return a ValidSymbolList. ValidSymbolList is an iterable list of ValidSymbol objects. How to search and filter by region or asset type. Lets check for equities Tesla has listed in south america. from yfs import fuzzy_search from yfs import ExchangeTypes result = fuzzy_search ( \"TESLA\" , first_ticker = False , exchange_type = ExchangeTypes . south_america ) print ( result ) Lets find ETF's with bull in the name. from pprint import pprint from yfs import fuzzy_search from yfs import ExchangeTypes from yfs import AssetTypes results = fuzzy_search ( \"bull\" , first_ticker = False , asset_type = AssetTypes . ETF , exchange_type = ExchangeTypes . united_states , ) print ( results . json ( indent = 4 )) # Getting tired of json. let use dictionaries! for ticker in results : pprint ( ticker . dict ()) Note You can filter by asset_type by using the AssetTypes enum. How to filter symbols post lookup. from pprint import pprint from yfs import fuzzy_search from yfs import ExchangeTypes from yfs import AssetTypes from yfs import get_summary_page results = fuzzy_search ( \"AMZN\" , first_ticker = False , use_filter = False ) pprint ( results . dict ()) # Lets get the US indices with AMZN in the name. index_only = results . filter_symbols ( ExchangeTypes . united_states , AssetTypes . INDEX ) pprint ( index_only . dict ()) # Now lets get the summary pages of all the amazon listing in south america. south_american_equities = results . filter_symbols ( ExchangeTypes . south_america , AssetTypes . EQUITY ) for equity in south_american_equities : page = get_summary_page ( equity . symbol ) pprint ( page . dict ()) Note Set first_ticker and use_filter arguments to false to allow filtering post return.","title":"Fuzzy Search Examples"},{"location":"examples/fuzzy-search-examples/#fuzzy-search-examples","text":"","title":"Fuzzy Search Examples"},{"location":"examples/fuzzy-search-examples/#how-to-check-if-a-symbol-exists","text":"from yfs import fuzzy_search result = fuzzy_search ( \"aapl\" ) print ( result . json ( indent = 4 )) Note fuzzy_search returns a ValidSymbol or ValidSymbolList object. Use the .json or .dict method to serialize these objects.","title":"How to check if a symbol exists."},{"location":"examples/fuzzy-search-examples/#how-to-search-for-a-company-by-name","text":"from yfs import fuzzy_search results = fuzzy_search ( \"Apple\" ) print ( results )","title":"How to search for a company by name."},{"location":"examples/fuzzy-search-examples/#how-to-get-the-full-search-list","text":"from yfs import fuzzy_search results = fuzzy_search ( \"Apple\" , first_ticker = False ) print ( results . json ( indent = 4 )) for ticker in results : print ( ticker . json ( indent = 4 )) Note If the first_ticker argument is set to true fuzzy_search will return a ValidSymbolList. ValidSymbolList is an iterable list of ValidSymbol objects.","title":"How to get the full search list."},{"location":"examples/fuzzy-search-examples/#how-to-search-and-filter-by-region-or-asset-type","text":"","title":"How to search and filter by region or asset type."},{"location":"examples/fuzzy-search-examples/#lets-check-for-equities-tesla-has-listed-in-south-america","text":"from yfs import fuzzy_search from yfs import ExchangeTypes result = fuzzy_search ( \"TESLA\" , first_ticker = False , exchange_type = ExchangeTypes . south_america ) print ( result )","title":"Lets check for equities Tesla has listed in south america."},{"location":"examples/fuzzy-search-examples/#lets-find-etfs-with-bull-in-the-name","text":"from pprint import pprint from yfs import fuzzy_search from yfs import ExchangeTypes from yfs import AssetTypes results = fuzzy_search ( \"bull\" , first_ticker = False , asset_type = AssetTypes . ETF , exchange_type = ExchangeTypes . united_states , ) print ( results . json ( indent = 4 )) # Getting tired of json. let use dictionaries! for ticker in results : pprint ( ticker . dict ()) Note You can filter by asset_type by using the AssetTypes enum.","title":"Lets find ETF's with bull in the name."},{"location":"examples/fuzzy-search-examples/#how-to-filter-symbols-post-lookup","text":"from pprint import pprint from yfs import fuzzy_search from yfs import ExchangeTypes from yfs import AssetTypes from yfs import get_summary_page results = fuzzy_search ( \"AMZN\" , first_ticker = False , use_filter = False ) pprint ( results . dict ()) # Lets get the US indices with AMZN in the name. index_only = results . filter_symbols ( ExchangeTypes . united_states , AssetTypes . INDEX ) pprint ( index_only . dict ()) # Now lets get the summary pages of all the amazon listing in south america. south_american_equities = results . filter_symbols ( ExchangeTypes . south_america , AssetTypes . EQUITY ) for equity in south_american_equities : page = get_summary_page ( equity . symbol ) pprint ( page . dict ()) Note Set first_ticker and use_filter arguments to false to allow filtering post return.","title":"How to filter symbols post lookup."},{"location":"examples/statistics-page-examples/","text":"Statistics Page Examples How to get a single symbols statistics page. from yfs import get_statistics_page result = get_statistics_page ( \"AAPL\" ) print ( result . json ( indent = 4 )) How to get multiple statistics pages without threads from yfs import get_multiple_statistics_pages search_items = [ \"TSLA\" , \"GOOGLE\" , \"appl\" , \"aapl\" ] results = get_multiple_statistics_pages ( search_items , with_threads = False ) print ( results . dataframe ) How to get multiple statistics pages with threads from yfs import get_multiple_statistics_pages search_items = [ \"TSLA\" , \"GOOGLE\" , \"appl\" , \"aapl\" ] results = get_multiple_statistics_pages ( search_items , with_threads = True , thread_count = 5 ) print ( results . dataframe )","title":"Statistics Page Examples"},{"location":"examples/statistics-page-examples/#statistics-page-examples","text":"","title":"Statistics Page Examples"},{"location":"examples/statistics-page-examples/#how-to-get-a-single-symbols-statistics-page","text":"from yfs import get_statistics_page result = get_statistics_page ( \"AAPL\" ) print ( result . json ( indent = 4 ))","title":"How to get a single symbols statistics page."},{"location":"examples/statistics-page-examples/#how-to-get-multiple-statistics-pages-without-threads","text":"from yfs import get_multiple_statistics_pages search_items = [ \"TSLA\" , \"GOOGLE\" , \"appl\" , \"aapl\" ] results = get_multiple_statistics_pages ( search_items , with_threads = False ) print ( results . dataframe )","title":"How to get multiple statistics pages without threads"},{"location":"examples/statistics-page-examples/#how-to-get-multiple-statistics-pages-with-threads","text":"from yfs import get_multiple_statistics_pages search_items = [ \"TSLA\" , \"GOOGLE\" , \"appl\" , \"aapl\" ] results = get_multiple_statistics_pages ( search_items , with_threads = True , thread_count = 5 ) print ( results . dataframe )","title":"How to get multiple statistics pages with threads"},{"location":"examples/summary-page-examples/","text":"Summary Page Examples How to get a single summary page. from yfs import get_summary_page result = get_summary_page ( \"TSLA\" ) print ( result . json ( indent = 4 )) Note The get_summary_page function returns a single SummaryPage object. You can serialize the SummaryPage object to json or a dictionary with the .json() and .dict() methods. How to get multiple quotes from the summary page without threads. from yfs import get_multiple_summary_pages COLUMNS = [ \"open\" , \"high\" , \"low\" , \"close\" , \"volume\" ] search_items = [ \"TSLA\" , \"GOOGLE\" , \"appl\" , \"aapl\" ] results = get_multiple_summary_pages ( search_items ) print ( results . dataframe [ COLUMNS ]) Note You can pass company names too. This function will do a symbol look up for you using fuzzy_search. The get_multiple_summary_pages returns a SummaryPageGroup which you can serialize to a pandas dataframe. How to get multiple quotes from the summary page with threads. from yfs import get_multiple_summary_pages COLUMNS = [ \"open\" , \"high\" , \"low\" , \"close\" , \"volume\" ] search_items = [ \"TSLA\" , \"GOOGLE\" , \"appl\" , \"aapl\" ] results = get_multiple_summary_pages ( search_items , with_threads = True , thread_count = 5 ) print ( results . dataframe [ COLUMNS ])","title":"Summary Page Examples"},{"location":"examples/summary-page-examples/#summary-page-examples","text":"","title":"Summary Page Examples"},{"location":"examples/summary-page-examples/#how-to-get-a-single-summary-page","text":"from yfs import get_summary_page result = get_summary_page ( \"TSLA\" ) print ( result . json ( indent = 4 )) Note The get_summary_page function returns a single SummaryPage object. You can serialize the SummaryPage object to json or a dictionary with the .json() and .dict() methods.","title":"How to get a single summary page."},{"location":"examples/summary-page-examples/#how-to-get-multiple-quotes-from-the-summary-page-without-threads","text":"from yfs import get_multiple_summary_pages COLUMNS = [ \"open\" , \"high\" , \"low\" , \"close\" , \"volume\" ] search_items = [ \"TSLA\" , \"GOOGLE\" , \"appl\" , \"aapl\" ] results = get_multiple_summary_pages ( search_items ) print ( results . dataframe [ COLUMNS ]) Note You can pass company names too. This function will do a symbol look up for you using fuzzy_search. The get_multiple_summary_pages returns a SummaryPageGroup which you can serialize to a pandas dataframe.","title":"How to get multiple quotes from the summary page without threads."},{"location":"examples/summary-page-examples/#how-to-get-multiple-quotes-from-the-summary-page-with-threads","text":"from yfs import get_multiple_summary_pages COLUMNS = [ \"open\" , \"high\" , \"low\" , \"close\" , \"volume\" ] search_items = [ \"TSLA\" , \"GOOGLE\" , \"appl\" , \"aapl\" ] results = get_multiple_summary_pages ( search_items , with_threads = True , thread_count = 5 ) print ( results . dataframe [ COLUMNS ])","title":"How to get multiple quotes from the summary page with threads."}]}